import logging
import os
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ConversationHandler, filters, ContextTypes
)
from telegram.constants import ParseMode
from telegram.error import TelegramError
from datetime import datetime
import json
from typing import Dict, Any, List, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "8112684210:AAH1eo9dbi5_6SUdbBpLAacBl99aaMoN758"
CHANNEL_ID = "@ulx_ukraine"

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
MAX_PHOTOS = 5
MAX_PHOTO_SIZE = 20 * 1024 * 1024  # 20MB
MAX_TITLE_LENGTH = 100
MAX_DESCRIPTION_LENGTH = 1000
MIN_PRICE = 0.01
MAX_PRICE = 1000000

# –°–æ—Å—Ç–æ—è–Ω–∏—è conversation handler
(
    CHOOSING_CATEGORY,
    CHOOSING_SUBCATEGORY,
    ADDING_MANUAL_SUBCATEGORY,
    CHOOSING_REGION,
    CHOOSING_CITY,
    ADDING_MANUAL_CITY,
    CHOOSING_CONDITION,
    ADDING_TITLE,
    ADDING_DESCRIPTION,
    ADDING_PRICE,
    ADDING_PHOTOS,
    CONFIRMING
) = range(12)

# –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
CATEGORIES = {
    "üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å": {
        "subcategories": ["–ö–≤–∞—Ä—Ç–∏—Ä—ã", "–î–æ–º–∞", "–£—á–∞—Å—Ç–∫–∏", "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è", "–ê—Ä–µ–Ω–¥–∞", "–ì–∞—Ä–∞–∂–∏", "–î—Ä—É–≥–æ–µ"],
        "has_condition": True
    },
    "üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç": {
        "subcategories": ["–õ–µ–≥–∫–æ–≤—ã–µ", "–ì—Ä—É–∑–æ–≤—ã–µ", "–ú–æ—Ç–æ—Ü–∏–∫–ª—ã", "–í–æ–¥–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–í–µ–ª–æ—Å–∏–ø–µ–¥—ã", "–ó–∞–ø—á–∞—Å—Ç–∏", "–î—Ä—É–≥–æ–µ"],
        "has_condition": True
    },
    "üíº –†–∞–±–æ—Ç–∞": {
        "subcategories": ["–í–∞–∫–∞–Ω—Å–∏–∏", "–†–µ–∑—é–º–µ", "–§—Ä–∏–ª–∞–Ω—Å", "–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∏", "–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞", "–î—Ä—É–≥–æ–µ"],
        "has_condition": False
    },
    "üì± –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞": {
        "subcategories": ["–¢–µ–ª–µ—Ñ–æ–Ω—ã", "–ù–æ—É—Ç–±—É–∫–∏", "–§–æ—Ç–æ/–≤–∏–¥–µ–æ", "–ê—É–¥–∏–æ", "–ò–≥—Ä—ã", "–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞", "–î—Ä—É–≥–æ–µ"],
        "has_condition": True
    },
    "üè° –î–æ–º –∏ —Å–∞–¥": {
        "subcategories": ["–ú–µ–±–µ–ª—å", "–¢–µ—Ö–Ω–∏–∫–∞", "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", "–†–µ–º–æ–Ω—Ç", "–ü—Ä–æ–¥—É–∫—Ç—ã", "–†–∞—Å—Ç–µ–Ω–∏—è", "–î—Ä—É–≥–æ–µ"],
        "has_condition": True
    },
    "üëó –ú–æ–¥–∞ –∏ –∫—Ä–∞—Å–æ—Ç–∞": {
        "subcategories": ["–û–¥–µ–∂–¥–∞", "–û–±—É–≤—å", "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã", "–ß–∞—Å—ã", "–£–∫—Ä–∞—à–µ–Ω–∏—è", "–ö–æ—Å–º–µ—Ç–∏–∫–∞", "–î—Ä—É–≥–æ–µ"],
        "has_condition": True
    },
    "üß∏ –î–µ—Ç–∏": {
        "subcategories": ["–û–¥–µ–∂–¥–∞", "–ò–≥—Ä—É—à–∫–∏", "–ö–æ–ª—è—Å–∫–∏", "–®–∫–æ–ª—å–Ω—ã–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏", "–î–µ—Ç—Å–∫–∞—è –º–µ–±–µ–ª—å", "–î—Ä—É–≥–æ–µ"],
        "has_condition": True
    },
    "üéØ –•–æ–±–±–∏ –∏ —Å–ø–æ—Ä—Ç": {
        "subcategories": ["–°–ø–æ—Ä—Ç", "–ú—É–∑—ã–∫–∞", "–ö–Ω–∏–≥–∏", "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "–†—É–∫–æ–¥–µ–ª–∏–µ", "–¢—É—Ä–∏–∑–º", "–î—Ä—É–≥–æ–µ"],
        "has_condition": True
    },
    "üêï –ñ–∏–≤–æ—Ç–Ω—ã–µ": {
        "subcategories": ["–°–æ–±–∞–∫–∏", "–ö–æ—à–∫–∏", "–ü—Ç–∏—Ü—ã", "–†—ã–±—ã", "–¢–æ–≤–∞—Ä—ã –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö", "–î—Ä—É–≥–æ–µ"],
        "has_condition": False
    },
    "üîß –£—Å–ª—É–≥–∏": {
        "subcategories": ["–†–µ–º–æ–Ω—Ç", "–ö—Ä–∞—Å–æ—Ç–∞", "–û–±—É—á–µ–Ω–∏–µ", "–ü–µ—Ä–µ–≤–æ–∑–∫–∏", "–ö–ª–∏–Ω–∏–Ω–≥", "IT-—É—Å–ª—É–≥–∏", "–î—Ä—É–≥–æ–µ"],
        "has_condition": False
    }
}

# –ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –í–°–ï–• –û–ë–õ–ê–°–¢–ï–ô –ò –ì–û–†–û–î–û–í –£–ö–†–ê–ò–ù–´
REGIONS = {
    "üåª –í–∏–Ω–Ω–∏—Ü–∫–∞—è –æ–±–ª.": [
        "–í–∏–Ω–Ω–∏—Ü–∞", "–ñ–º–µ—Ä–∏–Ω–∫–∞", "–•–º–µ–ª—å–Ω–∏–∫", "–ö–∞–ª–∏–Ω–∫–∞", "–¢—É–ª—å—á–∏–Ω", 
        "–ì–∞–π—Å–∏–Ω", "–ö–æ–∑—è—Ç—ã–Ω", "–õ–∏–ø–æ–≤–µ—Ü", "–ú–æ–≥–∏–ª—ë–≤-–ü–æ–¥–æ–ª—å—Å–∫–∏–π", "–ò–ª—å–∏–Ω—Ü—ã", "–î—Ä—É–≥–æ–π"
    ],
    "üå≤ –í–æ–ª—ã–Ω—Å–∫–∞—è –æ–±–ª.": [
        "–õ—É—Ü–∫", "–ö–æ–≤–µ–ª—å", "–ù–æ–≤–æ–≤–æ–ª—ã–Ω—Å–∫", "–õ—é–±–æ–º–ª—å", "–í–ª–∞–¥–∏–º–∏—Ä-–í–æ–ª—ã–Ω—Å–∫–∏–π", 
        "–ö–∞–º–µ–Ω—å-–ö–∞—à–∏—Ä—Å–∫–∏–π", "–ì–æ—Ä–æ—Ö–æ–≤", "–õ–æ–∫–∞—á–∏", "–†–∞—Ç–Ω–æ", "–¢—É—Ä–∏–π—Å–∫", "–î—Ä—É–≥–æ–π"
    ],
    "‚ö° –î–Ω–µ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å–∫–∞—è –æ–±–ª.": [
        "–î–Ω–µ–ø—Ä", "–ö—Ä–∏–≤–æ–π –†–æ–≥", "–ù–∏–∫–æ–ø–æ–ª—å", "–ü–æ–∫—Ä–æ–≤", "–ö–∞–º–µ–Ω—Å–∫–æ–µ", 
        "–ú–∞—Ä–≥–∞–Ω–µ—Ü", "–ñ–µ–ª—Ç—ã–µ –í–æ–¥—ã", "–¢–µ—Ä–Ω–æ–≤–∫–∞", "–ù–æ–≤–æ–º–æ—Å–∫–æ–≤—Å–∫", "–ü–∞–≤–ª–æ–≥—Ä–∞–¥", "–î—Ä—É–≥–æ–π"
    ],
    "üåø –ñ–∏—Ç–æ–º–∏—Ä—Å–∫–∞—è –æ–±–ª.": [
        "–ñ–∏—Ç–æ–º–∏—Ä", "–ö–æ—Ä–æ—Å—Ç–µ–Ω—å", "–ú–∞–ª–∏–Ω", "–ù–æ–≤–æ–≥—Ä–∞–¥-–í–æ–ª—ã–Ω—Å–∫–∏–π", "–ë–µ—Ä–¥–∏—á–µ–≤", 
        "–ß—É–¥–Ω–æ–≤", "–†–∞–¥–æ–º—ã—à–ª—å", "–û–≤—Ä—É—á", "–ê–Ω–¥—Ä—É—à–µ–≤–∫–∞", "–ï–º—ñ–ª—å—á–∏–Ω–æ", "–î—Ä—É–≥–æ–π"
    ],
    "üèîÔ∏è –ó–∞–∫–∞—Ä–ø–∞—Ç—Å–∫–∞—è –æ–±–ª.": [
        "–£–∂–≥–æ—Ä–æ–¥", "–ú—É–∫–∞—á–µ–≤–æ", "–•—É—Å—Ç", "–ë–µ—Ä–µ–≥–æ–≤–æ", "–†–∞—Ö–æ–≤", 
        "–í–∏–Ω–æ–≥—Ä–∞–¥–æ–≤", "–ò—Ä—à–∞–≤–∞", "–¢—è—á–µ–≤", "–í–µ–ª–∏–∫–∏–π –ë–µ—Ä–µ–∑–Ω—ã–π", "–ü–µ—Ä–µ—á–∏–Ω", "–î—Ä—É–≥–æ–π"
    ],
    "üåæ –ó–∞–ø–æ—Ä–æ–∂—Å–∫–∞—è –æ–±–ª.": [
        "–ó–∞–ø–æ—Ä–æ–∂—å–µ", "–ú–µ–ª–∏—Ç–æ–ø–æ–ª—å", "–ü–æ–ª–æ–≥–∏", "–ë–µ—Ä–¥—è–Ω—Å–∫", "–¢–æ–∫–º–∞–∫", 
        "–í–∞—Å–∏–ª—å–µ–≤–∫–∞", "–ö–∞–º–µ–Ω–∫–∞-–î–Ω–µ–ø—Ä–æ–≤—Å–∫–∞—è", "–û—Ä–µ—Ö–æ–≤", "–≠–Ω–µ—Ä–≥–æ–¥–∞—Ä", "–ì—É–ª—è–π–ø–æ–ª–µ", "–î—Ä—É–≥–æ–π"
    ],
    "üéø –ò–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫–æ–≤—Å–∫–∞—è –æ–±–ª.": [
        "–ò–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫–æ–≤—Å–∫", "–ö–æ–ª–æ–º—ã—è", "–ö–∞–ª—É—à", "–ë—É—Ä—à—Ç—ã–Ω", "–ù–∞–¥–≤–æ—Ä–Ω–∞—è", 
        "–î–æ–ª–∏–Ω–∞", "–ì–æ—Ä–æ–¥–µ–Ω–∫–∞", "–ë–æ–ª–µ—Ö–æ–≤", "–°–Ω—è—Ç—ã–Ω", "–Ø—Ä–µ–º—á–µ", "–î—Ä—É–≥–æ–π"
    ],
    "üèõÔ∏è –ö–∏–µ–≤—Å–∫–∞—è –æ–±–ª.": [
        "–ö–∏–µ–≤", "–ë—Ä–æ–≤–∞—Ä—ã", "–ë–µ–ª–∞—è –¶–µ—Ä–∫–æ–≤—å", "–ë–æ—Ä–∏—Å–ø–æ–ª—å", "–ò—Ä–ø–µ–Ω—å", 
        "–ë—É—á–∞", "–í–∞—Å–∏–ª—å–∫–æ–≤", "–û–±—É—Ö–æ–≤", "–ü–µ—Ä–µ—è—Å–ª–∞–≤", "–°–∫–≤–∏—Ä–∞", "–î—Ä—É–≥–æ–π"
    ],
    "üåª –ö–∏—Ä–æ–≤–æ–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª.": [
        "–ö—Ä–æ–ø–∏–≤–Ω–∏—Ü–∫–∏–π", "–ó–Ω–∞–º–µ–Ω–∫–∞", "–°–≤–µ—Ç–ª–æ–≤–æ–¥—Å–∫", "–ë–æ–±—Ä–∏–Ω–µ—Ü", "–ù–æ–≤–æ–º–∏—Ä–≥–æ—Ä–æ–¥", 
        "–î–æ–ª–∏–Ω—Å–∫–∞—è", "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∏—è", "–ú–∞–ª–∞—è –í–∏—Å–∫–∞", "–ü–µ—Ç—Ä–æ–≤–æ", "–ì–∞–π–≤–æ—Ä–æ–Ω", "–î—Ä—É–≥–æ–π"
    ],
    "ü¶Å –õ—å–≤–æ–≤—Å–∫–∞—è –æ–±–ª.": [
        "–õ—å–≤–æ–≤", "–î—Ä–æ–≥–æ–±—ã—á", "–°—Ç—Ä—ã–π", "–ß–µ—Ä–≤–æ–Ω–æ–≥—Ä–∞–¥", "–°–∞–º–±–æ—Ä", 
        "–¢—Ä—É—Å–∫–∞–≤–µ—Ü", "–ë–æ—Ä–∏—Å–ª–∞–≤", "–ú–æ—Ä—à–∏–Ω", "–ù–æ–≤—ã–π –†–æ–∑–¥–æ–ª", "–Ø–≤–æ—Ä–æ–≤", "–î—Ä—É–≥–æ–π"
    ],
    "‚öì –ù–∏–∫–æ–ª–∞–µ–≤—Å–∫–∞—è –æ–±–ª.": [
        "–ù–∏–∫–æ–ª–∞–µ–≤", "–Æ–∂–Ω–æ—É–∫—Ä–∞–∏–Ω—Å–∫", "–ü–µ—Ä–≤–æ–º–∞–π—Å–∫", "–í–æ–∑–Ω–µ—Å–µ–Ω—Å–∫", "–û—á–∞–∫–æ–≤", 
        "–ë–∞—à—Ç–∞–Ω–∫–∞", "–°–Ω–∏–≥–∏—Ä–µ–≤–∫–∞", "–ù–æ–≤–∞—è –û–¥–µ—Å—Å–∞", "–ë–µ—Ä–µ–∑–∞–Ω–∫–∞", "–ê—Ä–±—É–∑–∏–Ω–∫–∞", "–î—Ä—É–≥–æ–π"
    ],
    "üåä –û–¥–µ—Å—Å–∫–∞—è –æ–±–ª.": [
        "–û–¥–µ—Å—Å–∞", "–ß–µ—Ä–Ω–æ–º–æ—Ä—Å–∫", "–ë–µ–ª–≥–æ—Ä–æ–¥-–î–Ω–µ—Å—Ç—Ä–æ–≤—Å–∫–∏–π", "–ò–∑–º–∞–∏–ª", "–ü–æ–¥–æ–ª—å—Å–∫", 
        "–Æ–∂–Ω—ã–π", "–¢–µ–ø–ª–æ–¥–∞—Ä", "–†–µ–Ω–∏", "–ö–∏–ª–∏—è", "–¢–∞—Ç–∞—Ä–±—É–Ω–∞—Ä—ã", "–î—Ä—É–≥–æ–π"
    ],
    "üåæ –ü–æ–ª—Ç–∞–≤—Å–∫–∞—è –æ–±–ª.": [
        "–ü–æ–ª—Ç–∞–≤–∞", "–ö—Ä–µ–º–µ–Ω—á—É–≥", "–õ—É–±–Ω—ã", "–ì–æ—Ä–∏—à–Ω–∏–µ –ü–ª–∞–≤–Ω–∏", "–ú–∏—Ä–≥–æ—Ä–æ–¥", 
        "–ü–∏—Ä—è—Ç–∏–Ω", "–ì–∞–¥—è—á", "–ó–∏–Ω—å–∫–æ–≤", "–ö–∞—Ä–ª–æ–≤–∫–∞", "–ö–æ—Ç–µ–ª—å–≤–∞", "–î—Ä—É–≥–æ–π"
    ],
    "üå≤ –†–æ–≤–µ–Ω—Å–∫–∞—è –æ–±–ª.": [
        "–†–æ–≤–Ω–æ", "–í–∞—Ä–∞—à", "–î—É–±–Ω–æ", "–ó–¥–æ–ª–±—É–Ω–æ–≤", "–ö–æ—Å—Ç–æ–ø–æ–ª—å", 
        "–°–∞—Ä–Ω—ã", "–ë–µ—Ä–µ–∑–Ω–æ–µ", "–û—Å—Ç—Ä–æ–≥", "–î–µ–º–∏–¥–æ–≤–∫–∞", "–ö–æ—Ä–µ—Ü", "–î—Ä—É–≥–æ–π"
    ],
    "üåø –°—É–º—Å–∫–∞—è –æ–±–ª.": [
        "–°—É–º—ã", "–ö–æ–Ω–æ—Ç–æ–ø", "–®–æ—Å—Ç–∫–∞", "–ê—Ö—Ç—ã—Ä–∫–∞", "–†–æ–º–Ω—ã", 
        "–ì–ª—É—Ö–æ–≤", "–õ–µ–±–µ–¥–∏–Ω", "–¢—Ä–æ—Å—Ç—è–Ω–µ—Ü", "–ö—Ä–æ–ª–µ–≤–µ—Ü", "–ü—É—Ç–∏–≤–ª—å", "–î—Ä—É–≥–æ–π"
    ],
    "üåæ –¢–µ—Ä–Ω–æ–ø–æ–ª—å—Å–∫–∞—è –æ–±–ª.": [
        "–¢–µ—Ä–Ω–æ–ø–æ–ª—å", "–ö—Ä–µ–º–µ–Ω–µ—Ü", "–ß–æ—Ä—Ç–∫–æ–≤", "–ë–µ—Ä–µ–∂–∞–Ω—ã", "–ó–±–∞—Ä–∞–∂", 
        "–ì—É—Å—è—Ç–∏–Ω", "–ú–æ–Ω–∞—Å—Ç—ã—Ä–∏—Å–∫–∞", "–¢–µ—Ä–µ–±–æ–≤–ª—è", "–®—É–º—Å–∫", "–ó–∞–ª–µ—â–∏–∫–∏", "–î—Ä—É–≥–æ–π"
    ],
    "üéì –•–∞—Ä—å–∫–æ–≤—Å–∫–∞—è –æ–±–ª.": [
        "–•–∞—Ä—å–∫–æ–≤", "–ß—É–≥—É–µ–≤", "–ò–∑—é–º", "–õ–æ–∑–æ–≤–∞—è", "–ü–µ—Ä–≤–æ–º–∞–π—Å–∫–∏–π", 
        "–ë–∞–ª–∞–∫–ª–µ—è", "–ö—Ä–∞—Å–Ω–æ–≥—Ä–∞–¥", "–ö—É–ø—è–Ω—Å–∫", "–î–µ—Ä–≥–∞—á–∏", "–ú–µ—Ä–µ—Ñ–∞", "–î—Ä—É–≥–æ–π"
    ],
    "üåä –•–µ—Ä—Å–æ–Ω—Å–∫–∞—è –æ–±–ª.": [
        "–•–µ—Ä—Å–æ–Ω", "–°–∫–∞–¥–æ–≤—Å–∫", "–ù–æ–≤–∞—è –ö–∞—Ö–æ–≤–∫–∞", "–ö–∞—Ö–æ–≤–∫–∞", "–ì–µ–Ω–∏—á–µ—Å–∫", 
        "–ì–æ–ª–∞—è –ü—Ä–∏—Å—Ç–∞–Ω—å", "–ë–µ—Ä–∏—Å–ª–∞–≤", "–¶—é—Ä—É–ø–∏–Ω—Å–∫", "–ê—Ä–º—è–Ω—Å–∫", "–¢–∞–≤—Ä–∏–π—Å–∫", "–î—Ä—É–≥–æ–π"
    ],
    "üåæ –•–º–µ–ª—å–Ω–∏—Ü–∫–∞—è –æ–±–ª.": [
        "–•–º–µ–ª—å–Ω–∏—Ü–∫–∏–π", "–®–µ–ø–µ—Ç–æ–≤–∫–∞", "–ù–µ—Ç–µ—à–∏–Ω", "–°–ª–∞–≤—É—Ç–∞", "–ö–∞–º–µ–Ω–µ—Ü-–ü–æ–¥–æ–ª—å—Å–∫–∏–π", 
        "–°—Ç–∞—Ä–æ–∫–æ—Å—Ç—è–Ω—Ç–∏–Ω–æ–≤", "–•–º–µ–ª—å–Ω–∏–∫", "–í–æ–ª–æ—á–∏—Å–∫", "–ò–∑—è—Å–ª–∞–≤", "–ü–æ–ª–æ–Ω–Ω–æ–µ", "–î—Ä—É–≥–æ–π"
    ],
    "üåª –ß–µ—Ä–∫–∞—Å—Å–∫–∞—è –æ–±–ª.": [
        "–ß–µ—Ä–∫–∞—Å—Å—ã", "–£–º–∞–Ω—å", "–°–º–µ–ª–∞", "–ö–∞–º–µ–Ω–∫–∞", "–ó–≤–µ–Ω–∏–≥–æ—Ä–æ–¥–∫–∞", 
        "–ó–æ–ª–æ—Ç–æ–Ω–æ—à–∞", "–ì–æ—Ä–æ–¥–∏—â–µ", "–ö–∞–Ω–µ–≤", "–ö–æ—Ä—Å—É–Ω—å-–®–µ–≤—á–µ–Ω–∫–æ–≤—Å–∫–∏–π", "–¢–∞–ª—å–Ω–æ–µ", "–î—Ä—É–≥–æ–π"
    ],
    "üåπ –ß–µ—Ä–Ω–æ–≤–∏—Ü–∫–∞—è –æ–±–ª.": [
        "–ß–µ—Ä–Ω–æ–≤—Ü—ã", "–ù–æ–≤–æ–¥–Ω–µ—Å—Ç—Ä–æ–≤—Å–∫", "–ö–∏—Ü–º–∞–Ω—å", "–°—Ç–æ—Ä–æ–∂–∏–Ω–µ—Ü", "–í–∏–∂–Ω–∏—Ü–∞", 
        "–ó–∞—Å—Ç–∞–≤–Ω–∞", "–ö–µ–ª—å–º–µ–Ω—Ü—ã", "–ì–ª—ã–±–æ–∫–∞", "–•–æ—Ç–∏–Ω", "–ë–µ—Ä–µ–≥–æ–º–µ—Ç", "–î—Ä—É–≥–æ–π"
    ],
    "üå≤ –ß–µ—Ä–Ω–∏–≥–æ–≤—Å–∫–∞—è –æ–±–ª.": [
        "–ß–µ—Ä–Ω–∏–≥–æ–≤", "–ù–µ–∂–∏–Ω", "–ü—Ä–∏–ª—É–∫–∏", "–ë–∞—Ö–º–∞—á", "–ù–æ–≤–≥–æ—Ä–æ–¥-–°–µ–≤–µ—Ä—Å–∫–∏–π", 
        "–ö–æ—Ä—é–∫–æ–≤–∫–∞", "–©–æ—Ä—Å", "–ì–æ—Ä–æ–¥–Ω—è", "–ú–µ–Ω–∞", "–°–µ–º–µ–Ω–æ–≤–∫–∞", "–î—Ä—É–≥–æ–π"
    ]
}

CONDITIONS = ["‚ú® –ù–æ–≤–æ–µ", "‚≠ê –û—Ç–ª–∏—á–Ω–æ–µ", "üëç –•–æ—Ä–æ—à–µ–µ", "üîß –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ", "üõ†Ô∏è –¢—Ä–µ–±—É–µ—Ç —Ä–µ–º–æ–Ω—Ç–∞"]

# –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
def validate_price(price_text: str) -> Optional[float]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã"""
    try:
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏
        price_text = price_text.replace(' ', '').replace(',', '.')
        price = float(price_text)
        
        if MIN_PRICE <= price <= MAX_PRICE:
            return price
        return None
    except (ValueError, TypeError):
        return None

def validate_title(title: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    return 3 <= len(title.strip()) <= MAX_TITLE_LENGTH

def validate_description(description: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è"""
    return 10 <= len(description.strip()) <= MAX_DESCRIPTION_LENGTH

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def create_keyboard(items: List[str], callback_prefix: str, columns: int = 1) -> List[List[InlineKeyboardButton]]:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = []
    for i in range(0, len(items), columns):
        row = []
        for j in range(columns):
            if i + j < len(items):
                item = items[i + j]
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É callback_data –¥–æ 64 —Å–∏–º–≤–æ–ª–æ–≤
                callback_data = f"{callback_prefix}|{item}"
                if len(callback_data) > 64:
                    callback_data = callback_data[:64]
                row.append(InlineKeyboardButton(item, callback_data=callback_data))
        keyboard.append(row)
    return keyboard

def back_button(callback_data: str) -> List[InlineKeyboardButton]:
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥"""
    return [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=callback_data)]

def cancel_button() -> List[InlineKeyboardButton]:
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –û—Ç–º–µ–Ω–∞"""
    return [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_data(context: ContextTypes.DEFAULT_TYPE, key: str, default=None):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return context.user_data.get(key, default)

def set_user_data(context: ContextTypes.DEFAULT_TYPE, key: str, value):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    context.user_data[key] = value

def clear_user_data(context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    context.user_data.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    welcome_text = """
üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ULX Ukraine!</b>

–≠—Ç–æ –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –ø—Ä–æ–¥–∞–∂–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥ –ø–æ –≤—Å–µ–π –£–∫—Ä–∞–∏–Ω–µ.

<b>–ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å:</b>
‚Ä¢ üìù –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ
‚Ä¢ üè∑Ô∏è –í—ã–±—Ä–∞—Ç—å –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
‚Ä¢ üåç –£–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –≥–æ—Ä–æ–¥ –∏ –æ–±–ª–∞—Å—Ç—å
‚Ä¢ üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞
‚Ä¢ üí∞ –£–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É

<b>–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?</b>
–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!
"""
    
    keyboard = [
        [InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="start_sell")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    
    try:
        await update.message.reply_text(
            welcome_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.HTML
        )
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    help_text = """
<b>üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:</b>

<b>1. –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</b>
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å –∏ –≥–æ—Ä–æ–¥
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (3-100 —Å–∏–º–≤–æ–ª–æ–≤)
‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (10-1000 —Å–∏–º–≤–æ–ª–æ–≤)
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É (–æ—Ç 0.01 –¥–æ 1,000,000)
‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–¥–æ 5 —à—Ç—É–∫)
‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏—é

<b>2. –ö–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /sell - –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>3. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 5 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ –¥–æ 20MB –∫–∞–∂–¥–æ–µ
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: 3-100 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: 10-1000 —Å–∏–º–≤–æ–ª–æ–≤

<b>4. –ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.
"""
    
    keyboard = [
        [InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="start_sell")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    try:
        if update.message:
            await update.message.reply_text(
                help_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.HTML
            )
        elif update.callback_query:
            await update.callback_query.edit_message_text(
                help_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.HTML
            )
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø—Ä–∞–≤–∫–∏: {e}")

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    query = update.callback_query
    if query:
        await query.answer()
        
        keyboard = [
            [InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="start_sell")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        
        await query.edit_message_text(
            "‚ùå <b>–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
            "–í—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.HTML
        )
    else:
        await update.message.reply_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            parse_mode=ParseMode.HTML
        )
    
    clear_user_data(context)
    return ConversationHandler.END

# –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
async def start_selling(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    clear_user_data(context)
    
    keyboard = create_keyboard(list(CATEGORIES.keys()), "category", 2)
    keyboard.extend([cancel_button()])
    
    await query.edit_message_text(
        "üè∑Ô∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</b>",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.HTML
    )
    
    return CHOOSING_CATEGORY

# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def choose_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    data = query.data.split("|", 1)
    if len(data) != 2:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END
    
    category = data[1]
    
    if category not in CATEGORIES:
        await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END
    
    set_user_data(context, 'category', category)
    
    subcategories = CATEGORIES[category]["subcategories"]
    keyboard = create_keyboard(subcategories, "subcategory", 2)
    keyboard.extend([
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é", callback_data="manual_subcategory")],
        back_button("back_to_categories"),
        cancel_button()
    ])
    
    await query.edit_message_text(
        f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category}\n\n"
        f"<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.HTML
    )
    
    return CHOOSING_SUBCATEGORY

# –í—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def choose_subcategory(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    data = query.data.split("|", 1)
    if len(data) != 2:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        return ConversationHandler.END
    
    subcategory = data[1]
    set_user_data(context, 'subcategory', subcategory)
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–µ–≥–∏–æ–Ω–∞
    keyboard = create_keyboard(list(REGIONS.keys()), "region", 1)
    keyboard.extend([
        back_button("back_to_subcategories"),
        cancel_button()
    ])
    
    await query.edit_message_text(
        f"üìç <b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å:</b>",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.HTML
    )
    
    return CHOOSING_REGION

# –†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def manual_subcategory(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –°–º–∞—Ä—Ç—Ñ–æ–Ω—ã, –ó–∏–º–Ω—è—è –æ–¥–µ–∂–¥–∞, –î–µ—Ç—Å–∫–∏–µ –∫–Ω–∏–≥–∏",
        parse_mode=ParseMode.HTML
    )
    
    return ADDING_MANUAL_SUBCATEGORY

async def add_manual_subcategory(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä—É—á–Ω–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    subcategory = update.message.text.strip()
    
    if not subcategory or len(subcategory) > 50:
        await update.message.reply_text(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 1 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return ADDING_MANUAL_SUBCATEGORY
    
    set_user_data(context, 'subcategory', subcategory)
    
    keyboard = create_keyboard(list(REGIONS.keys()), "region", 1)
    keyboard.extend([cancel_button()])
    
    await update.message.reply_text(
        f"üìç <b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å:</b>",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.HTML
    )
    
    return CHOOSING_REGION

# –í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞
async def choose_region(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞"""
    query = update.callback_query
    await query.answer()
    
    data = query.data.split("|", 1)
    if len(data) != 2:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±–ª–∞—Å—Ç–∏.")
        return ConversationHandler.END
    
    region = data[1]
    
    if region not in REGIONS:
        await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –æ–±–ª–∞—Å—Ç—å.")
        return ConversationHandler.END
    
    set_user_data(context, 'region', region)
    
    cities = REGIONS[region]
    keyboard = create_keyboard(cities, "city", 2)
    keyboard.extend([
        back_button("back_to_regions"),
        cancel_button()
    ])
    
    await query.edit_message_text(
        f"üèôÔ∏è <b>–û–±–ª–∞—Å—Ç—å:</b> {region}\n\n"
        f"<b>–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:</b>",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.HTML
    )
    
    return CHOOSING_CITY

# –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
async def choose_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞"""
    query = update.callback_query
    await query.answer()
    
    data = query.data.split("|", 1)
    if len(data) != 2:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞.")
        return ConversationHandler.END
    
    city = data[1]
    
    if city == "–î—Ä—É–≥–æ–π":
        await query.edit_message_text(
            "‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞:</b>",
            parse_mode=ParseMode.HTML
        )
        return ADDING_MANUAL_CITY
    
    set_user_data(context, 'city', city)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —É–∫–∞–∑—ã–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    category = get_user_data(context, 'category')
    if CATEGORIES[category]["has_condition"]:
        keyboard = create_keyboard(CONDITIONS, "condition", 1)
        keyboard.extend([
            back_button("back_to_cities"),
            cancel_button()
        ])
        
        await query.edit_message_text(
            f"üîß <b>–£–∫–∞–∂–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b>",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.HTML
        )
        
        return CHOOSING_CONDITION
    else:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –Ω–∞–∑–≤–∞–Ω–∏—é
        await query.edit_message_text(
            f"üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</b>\n\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: iPhone 13 Pro 128GB, –ö–≤–∞—Ä—Ç–∏—Ä–∞ 2-–∫–æ–º–Ω –≤ —Ü–µ–Ω—Ç—Ä–µ\n\n"
            f"<i>–î–ª–∏–Ω–∞: –æ—Ç 3 –¥–æ {MAX_TITLE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤</i>",
            parse_mode=ParseMode.HTML
        )
        
        return ADDING_TITLE

# –†—É—á–Ω–æ–π –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞
async def add_manual_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    city = update.message.text.strip()
    
    if not city or len(city) > 50:
        await update.message.reply_text(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 1 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return ADDING_MANUAL_CITY
    
    set_user_data(context, 'city', city)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —É–∫–∞–∑—ã–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    category = get_user_data(context, 'category')
    if CATEGORIES[category]["has_condition"]:
        keyboard = create_keyboard(CONDITIONS, "condition", 1)
        keyboard.extend([cancel_button()])
        
        await update.message.reply_text(
            f"üîß <b>–£–∫–∞–∂–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b>",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.HTML
        )
        
        return CHOOSING_CONDITION
    else:
        await update.message.reply_text(
            f"üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</b>\n\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: iPhone 13 Pro 128GB, –ö–≤–∞—Ä—Ç–∏—Ä–∞ 2-–∫–æ–º–Ω –≤ —Ü–µ–Ω—Ç—Ä–µ\n\n"
            f"<i>–î–ª–∏–Ω–∞: –æ—Ç 3 –¥–æ {MAX_TITLE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤</i>",
            parse_mode=ParseMode.HTML
        )
        
        return ADDING_TITLE

# –í—ã–±–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
async def choose_condition(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    data = query.data.split("|", 1)
    if len(data) != 2:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è.")
        return ConversationHandler.END
    
    condition = data[1]
    set_user_data(context, 'condition', condition)
    
    await query.edit_message_text(
        f"üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</b>\n\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: iPhone 13 Pro 128GB, –ö–≤–∞—Ä—Ç–∏—Ä–∞ 2-–∫–æ–º–Ω –≤ —Ü–µ–Ω—Ç—Ä–µ\n\n"
        f"<i>–î–ª–∏–Ω–∞: –æ—Ç 3 –¥–æ {MAX_TITLE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤</i>",
        parse_mode=ParseMode.HTML
    )
    
    return ADDING_TITLE

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
async def add_title(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    title = update.message.text.strip()
    
    if not validate_title(title):
        await update.message.reply_text(
            f"‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 3 –¥–æ {MAX_TITLE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return ADDING_TITLE
    
    set_user_data(context, 'title', title)
    
    await update.message.reply_text(
        f"üìÑ <b>–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b>\n\n"
        f"–û–ø–∏—à–∏—Ç–µ –¥–µ—Ç–∞–ª–∏, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –ø—Ä–∏—á–∏–Ω—É –ø—Ä–æ–¥–∞–∂–∏ –∏ —Ç.–¥.\n\n"
        f"<i>–î–ª–∏–Ω–∞: –æ—Ç 10 –¥–æ {MAX_DESCRIPTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤</i>",
        parse_mode=ParseMode.HTML
    )
    
    return ADDING_DESCRIPTION

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
async def add_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    description = update.message.text.strip()
    
    if not validate_description(description):
        await update.message.reply_text(
            f"‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 10 –¥–æ {MAX_DESCRIPTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return ADDING_DESCRIPTION
    
    set_user_data(context, 'description', description)
    
    await update.message.reply_text(
        f"üí∞ <b>–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ –≥—Ä–Ω:</b>\n\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: 1500, 25000, 500.50\n\n"
        f"<i>–î–∏–∞–ø–∞–∑–æ–Ω: –æ—Ç {MIN_PRICE} –¥–æ {MAX_PRICE:,.0f} –≥—Ä–Ω</i>",
        parse_mode=ParseMode.HTML
    )
    
    return ADDING_PRICE

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã
async def add_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã"""
    price_text = update.message.text.strip()
    price = validate_price(price_text)
    
    if price is None:
        await update.message.reply_text(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {MIN_PRICE} –¥–æ {MAX_PRICE:,.0f}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return ADDING_PRICE
    
    set_user_data(context, 'price', price)
    
    keyboard = [
        [InlineKeyboardButton("üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_photos")],
        [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="skip_photos")]
    ]
    
    await update.message.reply_text(
        f"üì∏ <b>–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞:</b>\n\n"
        f"–ú–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ {MAX_PHOTOS} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.\n"
        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ: {MAX_PHOTO_SIZE // (1024*1024)}MB\n\n"
        f"<i>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–º–æ–≥–∞—é—Ç –ø—Ä–æ–¥–∞—Ç—å —Ç–æ–≤–∞—Ä –±—ã—Å—Ç—Ä–µ–µ!</i>",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.HTML
    )
    
    return ADDING_PHOTOS

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
async def handle_photos(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    if update.message.photo:
        photos = get_user_data(context, 'photos', [])
        
        if len(photos) >= MAX_PHOTOS:
            await update.message.reply_text(
                f"‚ùå –ú–∞–∫—Å–∏–º—É–º {MAX_PHOTOS} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –ù–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
            )
            return ADDING_PHOTOS
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        photo = update.message.photo[-1]
        
        if photo.file_size and photo.file_size > MAX_PHOTO_SIZE:
            await update.message.reply_text(
                f"‚ùå –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º—É–º {MAX_PHOTO_SIZE // (1024*1024)}MB."
            )
            return ADDING_PHOTOS
        
        photos.append(photo.file_id)
        set_user_data(context, 'photos', photos)
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="photos_done")],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ", callback_data="remove_last_photo")]
        ]
        
        await update.message.reply_text(
            f"‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! ({len(photos)}/{MAX_PHOTOS})\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return ADDING_PHOTOS
    
    return ADDING_PHOTOS

async def add_photos_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    query = update.callback_query
    await query.answer()
    
    set_user_data(context, 'photos', [])
    
    await query.edit_message_text(
        f"üì∏ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞:</b>\n\n"
        f"–ú–∞–∫—Å–∏–º—É–º {MAX_PHOTOS} —Ñ–æ—Ç–æ, –¥–æ {MAX_PHOTO_SIZE // (1024*1024)}MB –∫–∞–∂–¥–æ–µ",
        parse_mode=ParseMode.HTML
    )
    
    return ADDING_PHOTOS

async def skip_photos_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    query = update.callback_query
    await query.answer()
    
    set_user_data(context, 'photos', [])
    return await show_confirmation(update, context)

async def photos_done_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    query = update.callback_query
    await query.answer()
    
    return await show_confirmation(update, context)

async def remove_last_photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    photos = get_user_data(context, 'photos', [])
    if photos:
        photos.pop()
        set_user_data(context, 'photos', photos)
        
        if photos:
            keyboard = [
                [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="photos_done")],
                [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ", callback_data="remove_last_photo")]
            ]
            
            await query.edit_message_text(
                f"üóëÔ∏è –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ! ({len(photos)}/{MAX_PHOTOS})\n\n"
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await query.edit_message_text(
                f"üì∏ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞:</b>\n\n"
                f"–ú–∞–∫—Å–∏–º—É–º {MAX_PHOTOS} —Ñ–æ—Ç–æ, –¥–æ {MAX_PHOTO_SIZE // (1024*1024)}MB –∫–∞–∂–¥–æ–µ",
                parse_mode=ParseMode.HTML
            )
    
    return ADDING_PHOTOS

# –ü–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
async def show_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    data = context.user_data
    photos = get_user_data(context, 'photos', [])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    preview_text = f"""
üìã <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</b>

üè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {data.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üìÇ <b>–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {data.get('subcategory', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üìç <b>–û–±–ª–∞—Å—Ç—å:</b> {data.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üèôÔ∏è <b>–ì–æ—Ä–æ–¥:</b> {data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}
"""
    
    if 'condition' in data:
        preview_text += f"üîß <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {data['condition']}\n"
    
    preview_text += f"""
üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üí∞ <b>–¶–µ–Ω–∞:</b> {data.get('price', 0):,.0f} –≥—Ä–Ω
üì∏ <b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:</b> {len(photos)}

<i>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏—é</i>
"""
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="confirm")],
        [InlineKeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ]
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            preview_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.HTML
        )
    else:
        await update.message.reply_text(
            preview_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.HTML
        )
    
    return CONFIRMING

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª"""
    query = update.callback_query
    await query.answer()
    
    data = context.user_data
    photos = get_user_data(context, 'photos', [])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞
    post_text = f"""
üÜï <b>–ù–û–í–û–ï –û–ë–™–Ø–í–õ–ï–ù–ò–ï</b>

üìù <b>{data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>

üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{data.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}

üè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {data.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')} ‚Üí {data.get('subcategory', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üìç <b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> {data.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}, {data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}
"""
    
    if 'condition' in data:
        post_text += f"üîß <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {data['condition']}\n"
    
    post_text += f"""
üí∞ <b>–¶–µ–Ω–∞:</b> {data.get('price', 0):,.0f} –≥—Ä–Ω

üë§ <b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> @{query.from_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> @{query.from_user.username or '–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–∫—É'}

‚è∞ <b>–î–∞—Ç–∞:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}

#–æ–±—ä—è–≤–ª–µ–Ω–∏–µ #{data.get('category', '–∫–∞—Ç–µ–≥–æ—Ä–∏—è').replace(' ', '_').replace('üè†', '').replace('üöó', '').replace('üíº', '').replace('üì±', '').replace('üè°', '').replace('üëó', '').replace('üß∏', '').replace('üéØ', '').replace('üêï', '').replace('üîß', '').strip()}
"""
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
        if photos:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –≥—Ä—É–ø–ø–æ–π
            media_group = []
            for i, photo_id in enumerate(photos[:MAX_PHOTOS]):
                if i == 0:
                    # –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º
                    media_group.append(InputMediaPhoto(media=photo_id, caption=post_text, parse_mode=ParseMode.HTML))
                else:
                    # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
                    media_group.append(InputMediaPhoto(media=photo_id))
            
            await context.bot.send_media_group(
                chat_id=CHANNEL_ID,
                media=media_group
            )
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await context.bot.send_message(
                chat_id=CHANNEL_ID,
                text=post_text,
                parse_mode=ParseMode.HTML
            )
        
        success_text = f"""
‚úÖ <b>–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!</b>

–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ {CHANNEL_ID}

<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b>
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {len(data.get('title', ''))} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {len(data.get('description', ''))} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(photos)}
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
‚Ä¢ –õ–æ–∫–∞—Ü–∏—è: {data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}, {data.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}

<b>üöÄ –ß—Ç–æ –¥–∞–ª—å—à–µ?</b>
‚Ä¢ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É–≤–∏–¥—è—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –∫–∞–Ω–∞–ª–∞
‚Ä¢ –ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏
‚Ä¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ –¥–æ –ø—Ä–æ–¥–∞–∂–∏

<i>–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ULX Ukraine!</i>
"""
        
        keyboard = [
            [InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="start_sell")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await query.edit_message_text(
            success_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.HTML
        )
        
        logger.info(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {query.from_user.username or query.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        await query.edit_message_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b>\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. "
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –∫–∞–Ω–∞–ª—É\n"
            "‚Ä¢ –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞\n"
            "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode=ParseMode.HTML
        )
    
    clear_user_data(context)
    return ConversationHandler.END

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
async def edit_listing(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_title")],
        [InlineKeyboardButton("üìÑ –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_description")],
        [InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data="edit_price")],
        [InlineKeyboardButton("üì∏ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="edit_photos")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É", callback_data="back_to_preview")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ]
    
    await query.edit_message_text(
        "üìù <b>–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?</b>",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.HTML
    )
    
    return CONFIRMING

# –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥
async def back_to_categories(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    query = update.callback_query
    await query.answer()
    
    clear_user_data(context)
    
    keyboard = create_keyboard(list(CATEGORIES.keys()), "category", 2)
    keyboard.extend([cancel_button()])
    
    await query.edit_message_text(
        "üè∑Ô∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</b>",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.HTML
    )
    
    return CHOOSING_CATEGORY

async def back_to_subcategories(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    query = update.callback_query
    await query.answer()
    
    category = get_user_data(context, 'category')
    if not category:
        return await back_to_categories(update, context)
    
    subcategories = CATEGORIES[category]["subcategories"]
    keyboard = create_keyboard(subcategories, "subcategory", 2)
    keyboard.extend([
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é", callback_data="manual_subcategory")],
        back_button("back_to_categories"),
        cancel_button()
    ])
    
    await query.edit_message_text(
        f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category}\n\n"
        f"<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.HTML
    )
    
    return CHOOSING_SUBCATEGORY

async def back_to_regions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–µ–≥–∏–æ–Ω–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    keyboard = create_keyboard(list(REGIONS.keys()), "region", 1)
    keyboard.extend([
        back_button("back_to_subcategories"),
        cancel_button()
    ])
    
    await query.edit_message_text(
        f"üìç <b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å:</b>",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.HTML
    )
    
    return CHOOSING_REGION

async def back_to_cities(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    region = get_user_data(context, 'region')
    if not region:
        return await back_to_regions(update, context)
    
    cities = REGIONS[region]
    keyboard = create_keyboard(cities, "city", 2)
    keyboard.extend([
        back_button("back_to_regions"),
        cancel_button()
    ])
    
    await query.edit_message_text(
        f"üèôÔ∏è <b>–û–±–ª–∞—Å—Ç—å:</b> {region}\n\n"
        f"<b>–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:</b>",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.HTML
    )
    
    return CHOOSING_CITY

async def back_to_preview(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–º—É –ø—Ä–æ—Å–º–æ—Ç—Ä—É"""
    query = update.callback_query
    await query.answer()
    
    return await show_confirmation(update, context)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback
async def unknown_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    await query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    
    keyboard = [
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await query.edit_message_text(
        "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.HTML
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    clear_user_data(context)
    
    welcome_text = """
üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ULX Ukraine!</b>

–≠—Ç–æ –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –ø—Ä–æ–¥–∞–∂–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥ –ø–æ –≤—Å–µ–π –£–∫—Ä–∞–∏–Ω–µ.

<b>–ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å:</b>
‚Ä¢ üìù –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ
‚Ä¢ üè∑Ô∏è –í—ã–±—Ä–∞—Ç—å –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
‚Ä¢ üåç –£–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –≥–æ—Ä–æ–¥ –∏ –æ–±–ª–∞—Å—Ç—å
‚Ä¢ üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞
‚Ä¢ üí∞ –£–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É

<b>–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?</b>
–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!
"""
    
    keyboard = [
        [InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="start_sell")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    
    await query.edit_message_text(
        welcome_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.HTML
    )

# –ö–æ–º–∞–Ω–¥–∞ /sell
async def sell_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /sell –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    welcome_text = """
üöÄ <b>–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è</b>

–ù–∞—á–Ω–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è!
"""
    
    keyboard = [
        [InlineKeyboardButton("üìù –ù–∞—á–∞—Ç—å", callback_data="start_sell")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.HTML
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    try:
        logger.error(f"Update {update} caused error {context.error}")
        
        if update and update.message:
            await update.message.reply_text(
                "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start\n"
                "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n"
                "‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ",
                parse_mode=ParseMode.HTML
            )
        elif update and update.callback_query:
            try:
                await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
                await update.callback_query.edit_message_text(
                    "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞</b>\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.",
                    parse_mode=ParseMode.HTML
                )
            except:
                pass
    except Exception as e:
        print(f"Error in error_handler: {e}")
# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    print("üöÄ –ó–∞–ø—É—Å–∫ ULX Ukraine Bot...")
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(REGIONS)} –æ–±–ª–∞—Å—Ç–µ–π")
    print(f"üèôÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ {sum(len(c) for c in REGIONS.values())} –≥–æ—Ä–æ–¥–æ–≤")
    print(f"üè∑Ô∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(CATEGORIES)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    print(f"üîß –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(CONDITIONS)} —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤")
    
    # 1) –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = ApplicationBuilder().token(TOKEN).build()
    
    # 2) –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ã
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start_selling),
            CallbackQueryHandler(start_selling, pattern="^start_sell$"),
            CommandHandler("sell", start_selling) # Changed from sell_command to start_selling for consistency
        ],
        states={
            CHOOSING_CATEGORY: [
                CallbackQueryHandler(choose_category, pattern="^category\\|.*$")
            ],
            CHOOSING_SUBCATEGORY: [
                CallbackQueryHandler(choose_subcategory, pattern="^subcategory\\|.*$"),
                CallbackQueryHandler(manual_subcategory, pattern="^manual_subcategory$"),
                CallbackQueryHandler(back_to_categories, pattern="^back_to_categories$")
            ],
            ADDING_MANUAL_SUBCATEGORY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_manual_subcategory)
            ],
            CHOOSING_REGION: [
                CallbackQueryHandler(choose_region, pattern="^region\\|.*$"),
                CallbackQueryHandler(back_to_subcategories, pattern="^back_to_subcategories$")
            ],
            CHOOSING_CITY: [
                CallbackQueryHandler(choose_city, pattern="^city\\|.*$"),
                CallbackQueryHandler(back_to_regions, pattern="^back_to_regions$")
            ],
            ADDING_MANUAL_CITY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_manual_city)
            ],
            CHOOSING_CONDITION: [
                CallbackQueryHandler(choose_condition, pattern="^condition\\|.*$"),
                CallbackQueryHandler(back_to_cities, pattern="^back_to_cities$")
            ],
            ADDING_TITLE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_title)
            ],
            ADDING_DESCRIPTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_description)
            ],
            ADDING_PRICE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_price)
            ],
            ADDING_PHOTOS: [
                MessageHandler(filters.PHOTO, handle_photos),
                CallbackQueryHandler(add_photos_handler, pattern="^add_photos$"),
                CallbackQueryHandler(skip_photos_handler, pattern="^skip_photos$"),
                CallbackQueryHandler(photos_done_handler, pattern="^photos_done$"),
                CallbackQueryHandler(remove_last_photo_handler, pattern="^remove_last_photo$")
            ],
            CONFIRMING: [
                CallbackQueryHandler(confirm, pattern="^confirm$"),
                CallbackQueryHandler(edit_listing, pattern="^edit$"),
                CallbackQueryHandler(back_to_preview, pattern="^back_to_preview$"),
                # Add handlers for specific edits if you implement them
            ]
        },
        fallbacks=[
            CommandHandler("cancel", cancel),
            CallbackQueryHandler(cancel, pattern="^cancel$"),
            CommandHandler("start", start), # Allow /start to reset the conversation
            CallbackQueryHandler(main_menu_handler, pattern="^main_menu$") # Allow main_menu to reset
        ]
    )
    app.add_handler(conv_handler)
    
    app.add_handler(CommandHandler("start", start)) # This is the initial /start, separate from conv_handler's entry_point
    app.add_handler(CommandHandler("sell", sell_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CallbackQueryHandler(help_command,     pattern="^help$"))
    app.add_handler(CallbackQueryHandler(main_menu_handler,pattern="^main_menu$"))
    # Catch any unhandled callback queries and messages that aren't part of the conversation
    app.add_handler(CallbackQueryHandler(unknown_callback))
    app.add_error_handler(error_handler)
    
    # 3) –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–æ
    print("‚úÖ ULX Ukraine Bot –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ!")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
