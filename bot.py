import logging
import os
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ConversationHandler, filters, ContextTypes
)
from telegram.constants import ParseMode
from telegram.error import TelegramError, BadRequest # BadRequest —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
from datetime import datetime
import json
from typing import Dict, Any, List, Optional
import re # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.environ.get("TELEGRAM_TOKEN")
CHANNEL_ID = "@ulx_ukraine" # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
MAX_PHOTOS = 5
MAX_PHOTO_SIZE = 20 * 1024 * 1024  # 20MB
MAX_TITLE_LENGTH = 100
MAX_DESCRIPTION_LENGTH = 1000
MIN_PRICE = 0.01
MAX_PRICE = 1000000

# –°–æ—Å—Ç–æ—è–Ω–∏—è conversation handler
(
    CHOOSING_CATEGORY,
    CHOOSING_SUBCATEGORY,
    ADDING_MANUAL_SUBCATEGORY,
    CHOOSING_REGION,
    CHOOSING_CITY,
    ADDING_MANUAL_CITY,
    CHOOSING_CONDITION,
    ADDING_TITLE,
    ADDING_DESCRIPTION,
    ADDING_PRICE,
    ADDING_PHOTOS,
    ADDING_PHONE_NUMBER, # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    CONFIRMING,
    TYPING_MANUAL_SUBCATEGORY,
    TYPING_MANUAL_CITY,
    TYPING_TITLE,
    TYPING_DESCRIPTION,
    TYPING_PRICE,
) = map(chr, range(18)) # –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ 19, —Å—Ç–∞–ª–æ 18, —á—Ç–æ–±—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ—Å—Ç–æ—è–Ω–∏–π

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–æ–≤
CATEGORIES: Dict[str, Any] = {}
REGIONS: Dict[str, Any] = {}
CONDITIONS: Dict[str, str] = {}

def load_data_from_json():
    global CATEGORIES, REGIONS, CONDITIONS
    try:
        with open('categories.json', 'r', encoding='utf-8') as f:
            CATEGORIES = json.load(f)
        logger.info(f"üè∑Ô∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(CATEGORIES)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ categories.json")
    except FileNotFoundError:
        logger.error("‚ùå –§–∞–π–ª categories.json –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, —á—Ç–æ –∏ bot.py")
    except json.JSONDecodeError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è categories.json: {e}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ JSON.")

    try:
        with open('regions.json', 'r', encoding='utf-8') as f:
            REGIONS = json.load(f)
        logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(REGIONS)} –æ–±–ª–∞—Å—Ç–µ–π –∏–∑ regions.json")
        cities_count = 0
        for region_data in REGIONS.values():
            if "cities" in region_data:
                cities_count += len(region_data["cities"])
        logger.info(f"üèôÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ {cities_count} –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ regions.json")
    except FileNotFoundError:
        logger.error("‚ùå –§–∞–π–ª regions.json –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, —á—Ç–æ –∏ bot.py")
    except json.JSONDecodeError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è regions.json: {e}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ JSON.")

    try:
        with open('conditions.json', 'r', encoding='utf-8') as f:
            CONDITIONS = json.load(f)
        logger.info(f"üîß –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(CONDITIONS)} —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ conditions.json")
    except FileNotFoundError:
        logger.error("‚ùå –§–∞–π–ª conditions.json –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, —á—Ç–æ –∏ bot.py")
    except json.JSONDecodeError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è conditions.json: {e}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ JSON.")

load_data_from_json()

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–≤ –ø–∞–º—è—Ç–∏, –¥–ª—è –ø—Ä–æ–¥–∞ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ë–î)
user_data_listings: Dict[int, Dict[str, Any]] = {}

# --- –§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ –≤–≤–æ–¥–µ /start."""
    keyboard = [
        [InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="start_sell")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ULX Ukraine Bot!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ –∏–ª–∏ –æ–±–º–µ–Ω–µ —Ç–æ–≤–∞—Ä–æ–≤.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    query = update.callback_query
    if query:
        await query.answer()
        keyboard = [
            [InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="start_sell")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        if query.message.text:
             await query.edit_message_text(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup
            )
        else:
            await query.message.reply_text(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup
            )
    return ConversationHandler.END

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é."""
    text = (
        "<b>ULX Ukraine Bot - –ü–æ–º–æ—â—å</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ —Ç–æ–≤–∞—Ä–æ–≤.\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n"
        "/sell - –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è.\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏.\n\n"
        "<b>–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:</b>\n"
        "1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ 'üöÄ –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ' –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /sell.\n"
        "2. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞, –≤—ã–±–∏—Ä–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —Ä–µ–≥–∏–æ–Ω, –≥–æ—Ä–æ–¥, —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, "
        "–≤–≤–æ–¥—è –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, —Ü–µ–Ω—É, –∑–∞–≥—Ä—É–∂–∞—è —Ñ–æ—Ç–æ –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞—è –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
        "3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –∏ –æ–Ω–æ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ."
    )
    keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    elif update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)

async def sell_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è."""
    return await start_selling(update, context)

async def start_selling(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è."""
    user_id = update.effective_user.id
    user_data_listings[user_id] = {
        "photos": [],
        "user_id": user_id,
        "username": update.effective_user.username,
        "first_name": update.effective_user.first_name,
        "last_name": update.effective_user.last_name,
        "phone_number": None # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–∞–∫ None
    }

    keyboard = []
    if not CATEGORIES:
        message = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª categories.json."
        if update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.edit_message_text(message)
        else:
            await update.message.reply_text(message)
        return ConversationHandler.END

    for category_id, category_data in CATEGORIES.items():
        keyboard.append([InlineKeyboardButton(category_data["name"], callback_data=f"category|{category_id}")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    message = "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.\n\n" \
              "<b>–®–∞–≥ 1 –∏–∑ 10: –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:</b>" # –ò–∑–º–µ–Ω–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(message, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    else:
        await update.message.reply_text(message, reply_markup=reply_markup, parse_mode=ParseMode.HTML)

    return CHOOSING_CATEGORY

async def choose_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    category_id = query.data.split("|")[1]
    context.user_data["current_listing"] = user_data_listings.get(update.effective_user.id, {})
    context.user_data["current_listing"]["category_id"] = category_id
    context.user_data["current_listing"]["category_name"] = CATEGORIES.get(category_id, {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    subcategories = CATEGORIES.get(category_id, {}).get("subcategories", {})
    keyboard = []
    for sub_id, sub_name in subcategories.items():
        keyboard.append([InlineKeyboardButton(sub_name, callback_data=f"subcategory|{category_id}|{sub_id}")])
    keyboard.append([InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="manual_subcategory")])
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"<b>–®–∞–≥ 2 –∏–∑ 10: –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è '{CATEGORIES.get(category_id, {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}' –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:</b>", # –ò–∑–º–µ–Ω–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )
    return CHOOSING_SUBCATEGORY

async def manual_subcategory(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "<b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n"
        "(–ù–∞–ø—Ä–∏–º–µ—Ä: '–ò–≥—Ä–æ–≤—ã–µ –ü–ö', '–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞', '–î–µ—Ç—Å–∫–∏–µ –∫–Ω–∏–≥–∏')",
        parse_mode=ParseMode.HTML
    )
    return ADDING_MANUAL_SUBCATEGORY

async def add_manual_subcategory(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    manual_sub = update.message.text.strip()
    if not manual_sub:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        return ADDING_MANUAL_SUBCATEGORY

    context.user_data["current_listing"]["subcategory_id"] = "manual"
    context.user_data["current_listing"]["subcategory_name"] = manual_sub
    return await prompt_region(update, context)


async def choose_subcategory(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    _, category_id, sub_id = query.data.split("|")

    context.user_data["current_listing"] = user_data_listings.get(update.effective_user.id, {})
    
    if "category_id" not in context.user_data["current_listing"]:
        context.user_data["current_listing"]["category_id"] = category_id
        context.user_data["current_listing"]["category_name"] = CATEGORIES.get(category_id, {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")


    subcategories = CATEGORIES.get(category_id, {}).get("subcategories", {})
    context.user_data["current_listing"]["subcategory_id"] = sub_id
    context.user_data["current_listing"]["subcategory_name"] = subcategories.get(sub_id)

    return await prompt_region(update, context)

async def prompt_region(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = []
    if not REGIONS:
        message_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ä–µ–≥–∏–æ–Ω—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª regions.json."
        if update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.edit_message_text(message_text)
        else:
            await update.message.reply_text(message_text)
        return ConversationHandler.END

    for region_id, region_data in REGIONS.items():
        keyboard.append([InlineKeyboardButton(region_data["name"], callback_data=f"region|{region_id}")])
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_subcategories")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    message_text = "<b>–®–∞–≥ 3 –∏–∑ 10: –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:</b>" # –ò–∑–º–µ–Ω–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
    if update.callback_query:
        await update.callback_query.edit_message_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    elif update.message:
        await update.message.reply_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    return CHOOSING_REGION

async def choose_region(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    region_id = query.data.split("|")[1]
    context.user_data["current_listing"]["region_id"] = region_id
    context.user_data["current_listing"]["region_name"] = REGIONS.get(region_id, {}).get("name")

    cities = REGIONS.get(region_id, {}).get("cities", {})
    keyboard = []
    for city_id, city_name in cities.items():
        keyboard.append([InlineKeyboardButton(city_name, callback_data=f"city|{region_id}|{city_id}")])
    keyboard.append([InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="manual_city")])
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–≥–∏–æ–Ω–∞–º", callback_data="back_to_regions")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"<b>–®–∞–≥ 4 –∏–∑ 10: –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è '{REGIONS.get(region_id, {}).get('name')}' –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:</b>", # –ò–∑–º–µ–Ω–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )
    return CHOOSING_CITY

async def manual_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "<b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:</b>\n"
        "(–ù–∞–ø—Ä–∏–º–µ—Ä: '–ö–∏–µ–≤', '–û–¥–µ—Å—Å–∞', '–õ—å–≤–æ–≤')",
        parse_mode=ParseMode.HTML
    )
    return ADDING_MANUAL_CITY

async def add_manual_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    manual_city_name = update.message.text.strip()
    if not manual_city_name:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")
        return ADDING_MANUAL_CITY

    context.user_data["current_listing"]["city_id"] = "manual"
    context.user_data["current_listing"]["city_name"] = manual_city_name
    return await prompt_condition(update, context)

async def choose_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    _, region_id, city_id = query.data.split("|")

    cities = REGIONS.get(region_id, {}).get("cities", {})
    context.user_data["current_listing"]["city_id"] = city_id
    context.user_data["current_listing"]["city_name"] = cities.get(city_id)

    return await prompt_condition(update, context)

async def prompt_condition(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = []
    if not CONDITIONS:
        message_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª conditions.json."
        if update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.edit_message_text(message_text)
        else:
            await update.message.reply_text(message_text)
        return ConversationHandler.END

    for condition_id, condition_name in CONDITIONS.items():
        keyboard.append([InlineKeyboardButton(condition_name, callback_data=f"condition|{condition_id}")])
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞", callback_data="back_to_cities")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    message_text = "<b>–®–∞–≥ 5 –∏–∑ 10: –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b>" # –ò–∑–º–µ–Ω–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
    if update.callback_query:
        await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    elif update.message:
        await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    return CHOOSING_CONDITION

async def choose_condition(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    condition_id = query.data.split("|")[1]
    context.user_data["current_listing"]["condition_id"] = condition_id
    context.user_data["current_listing"]["condition_name"] = CONDITIONS.get(condition_id)

    await query.edit_message_text(
        "<b>–®–∞–≥ 6 –∏–∑ 10: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤):</b>\n" # –ò–∑–º–µ–Ω–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
        "(–ù–∞–ø—Ä–∏–º–µ—Ä: '–ù–æ—É—Ç–±—É–∫ HP Pavilion', '–ö—Ä–æ—Å—Å–æ–≤–∫–∏ Nike Air Max')",
        parse_mode=ParseMode.HTML
    )
    return ADDING_TITLE

async def add_title(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    title = update.message.text.strip()
    if not title or len(title) > MAX_TITLE_LENGTH:
        await update.message.reply_text(
            f"–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–æ {MAX_TITLE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return ADDING_TITLE
    context.user_data["current_listing"]["title"] = title
    await update.message.reply_text(
        "<b>–®–∞–≥ 7 –∏–∑ 10: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤):</b>\n" # –ò–∑–º–µ–Ω–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
        "(–ù–∞–ø—Ä–∏–º–µ—Ä: '–ü—Ä–æ–¥–∞—é —Å–≤–æ–π –Ω–æ—É—Ç–±—É–∫, –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è 1 –≥–æ–¥...', "
        "—É–∫–∞–∂–∏—Ç–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é, –¥–µ—Ñ–µ–∫—Ç—ã –∏ —Ç.–¥.)",
        parse_mode=ParseMode.HTML
    )
    return ADDING_DESCRIPTION

async def add_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    description = update.message.text.strip()
    if not description or len(description) > MAX_DESCRIPTION_LENGTH:
        await update.message.reply_text(
            f"–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–æ {MAX_DESCRIPTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return ADDING_DESCRIPTION
    context.user_data["current_listing"]["description"] = description
    await update.message.reply_text(
        "<b>–®–∞–≥ 8 –∏–∑ 10: –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ UAH (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1500.50):</b>\n" # –ò–∑–º–µ–Ω–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
        "(–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ' –∏–ª–∏ '–û–±–º–µ–Ω'.)",
        parse_mode=ParseMode.HTML
    )
    return ADDING_PRICE

async def add_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    price_str = update.message.text.strip().replace(',', '.')
    context.user_data["current_listing"]["price_raw"] = price_str
    
    price_value = None
    if price_str.lower() == "–±–µ—Å–ø–ª–∞—Ç–Ω–æ":
        price_value = 0.0
    elif price_str.lower() == "–æ–±–º–µ–Ω":
        price_value = -1.0
    else:
        try:
            price_value = float(price_str)
            if not (MIN_PRICE <= price_value <= MAX_PRICE):
                raise ValueError("Price out of range")
        except ValueError:
            await update.message.reply_text(
                f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1500.50), '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ' –∏–ª–∏ '–û–±–º–µ–Ω'."
            )
            return ADDING_PRICE
    
    context.user_data["current_listing"]["price"] = price_value

    keyboard = [
        [InlineKeyboardButton("üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_photos")],
        [InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å (–±–µ–∑ —Ñ–æ—Ç–æ)", callback_data="skip_photos")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "<b>–®–∞–≥ 9 –∏–∑ 10: –î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–¥–æ 5 —à—Ç.) –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ:</b>\n" # –ò–∑–º–µ–Ω–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
        "<i>(–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ: 20 –ú–ë)</i>",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )
    return ADDING_PHOTOS

async def handle_photos(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_data = context.user_data.get("current_listing", {})
    photos = user_data.get("photos", [])

    if len(photos) >= MAX_PHOTOS:
        await update.message.reply_text(f"–í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ ({MAX_PHOTOS}).")
        return ADDING_PHOTOS
    
    photo_file = update.message.photo[-1]
    if photo_file.file_size > MAX_PHOTO_SIZE:
        await update.message.reply_text(f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è (–º–∞–∫—Å. {MAX_PHOTO_SIZE / (1024 * 1024):.0f} –ú–ë). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –º–µ–Ω—å—à–µ–µ —Ñ–æ—Ç–æ.")
        return ADDING_PHOTOS

    photos.append(photo_file.file_id)
    user_data["photos"] = photos
    
    keyboard = []
    if len(photos) > 0:
        keyboard.append([InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ", callback_data="remove_last_photo")])
    if len(photos) < MAX_PHOTOS:
        keyboard.append([InlineKeyboardButton("üì∏ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ", callback_data="add_photos")])
    keyboard.append([InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ", callback_data="photos_done")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ: {len(photos)}/{MAX_PHOTOS}.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å.",
        reply_markup=reply_markup
    )
    return ADDING_PHOTOS

async def add_photos_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    user_data = context.user_data.get("current_listing", {})
    photos_count = len(user_data.get("photos", []))

    if photos_count >= MAX_PHOTOS:
        await query.edit_message_text(f"–í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ ({MAX_PHOTOS}). –ù–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å'.")
    else:
        await query.edit_message_text(
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é ({photos_count+1}/{MAX_PHOTOS}):"
        )
    return ADDING_PHOTOS

async def remove_last_photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user_data = context.user_data.get("current_listing", {})
    photos = user_data.get("photos", [])

    if photos:
        photos.pop()
        user_data["photos"] = photos
        keyboard = []
        if len(photos) > 0:
            keyboard.append([InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ", callback_data="remove_last_photo")])
        if len(photos) < MAX_PHOTOS:
            keyboard.append([InlineKeyboardButton("üì∏ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ", callback_data="add_photos")])
        keyboard.append([InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ", callback_data="photos_done")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ. –î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ: {len(photos)}/{MAX_PHOTOS}.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å.",
            reply_markup=reply_markup
        )
    else:
        await query.edit_message_text("–ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    return ADDING_PHOTOS

async def skip_photos_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data["current_listing"]["photos"] = []
    return await prompt_phone_number(update, context) # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø—Ä–æ—Å—É –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞

async def photos_done_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    return await prompt_phone_number(update, context) # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø—Ä–æ—Å—É –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞

async def prompt_phone_number(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    keyboard = [
        [InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_phone_number")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message_text = "<b>–®–∞–≥ 10 –∏–∑ 10: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, +380XXXXXXXXX):</b>\n" \
                   "<i>(–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥.)</i>"
    if update.callback_query:
        await update.callback_query.edit_message_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    elif update.message:
        await update.message.reply_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    return ADDING_PHONE_NUMBER

async def add_phone_number(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    phone_number = update.message.text.strip()
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
    # –ù–∞–ø—Ä–∏–º–µ—Ä, —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –≤–æ–∑–º–æ–∂–Ω—ã–π "+" –≤ –Ω–∞—á–∞–ª–µ
    if re.fullmatch(r"^\+?\d{7,15}$", phone_number):
        context.user_data["current_listing"]["phone_number"] = phone_number
        await update.message.reply_text(f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ '{phone_number}' –¥–æ–±–∞–≤–ª–µ–Ω.")
        return await preview_listing(update, context)
    else:
        await update.message.reply_text(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +380XXXXXXXXX –∏–ª–∏ 0XXXXXXXXX. "
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'."
        )
        return ADDING_PHONE_NUMBER

async def skip_phone_number_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    query = update.callback_query
    await query.answer()
    context.user_data["current_listing"]["phone_number"] = None # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ None, –µ—Å–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω–æ
    return await preview_listing(update, context)


async def preview_listing(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_data = context.user_data.get("current_listing", {})
    
    if not all(key in user_data for key in ["category_name", "subcategory_name", "region_name", "city_name", "condition_name", "title", "description", "price_raw"]):
        error_message = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å /sell."
        keyboard = [[InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start_sell")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        if update.callback_query:
            await update.callback_query.edit_message_text(error_message, reply_markup=reply_markup)
        elif update.message:
            await update.message.reply_text(error_message, reply_markup=reply_markup)
        return ConversationHandler.END

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    preview_text = f"""
‚ú® <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</b>
    
<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {user_data.get('title')}
<b>–¶–µ–Ω–∞:</b> {user_data.get('price_raw')} UAH
    
<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{user_data.get('description')}
    
<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {user_data.get('category_name')} / {user_data.get('subcategory_name')}
<b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> {user_data.get('city_name')}, {user_data.get('region_name')}
<b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {user_data.get('condition_name')}
    
<b>–§–æ—Ç–æ:</b> {len(user_data.get('photos', []))} —à—Ç.
"""
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if user_data.get('phone_number'):
        preview_text += f"\n<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {user_data['phone_number']}"

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="confirm")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit")],
        [InlineKeyboardButton("üóëÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    photos_to_send = user_data.get('photos', [])
    if photos_to_send:
        media = []
        for i, photo_id in enumerate(photos_to_send):
            if i == 0:
                media.append(InputMediaPhoto(media=photo_id, caption=preview_text, parse_mode=ParseMode.HTML))
            else:
                media.append(InputMediaPhoto(media=photo_id))
        
        if update.callback_query:
            try:
                await update.callback_query.message.delete()
            except BadRequest:
                pass
            
            sent_message = await update.callback_query.message.reply_media_group(media=media)
            context.user_data["preview_message_ids"] = [m.message_id for m in sent_message]
            
            await update.callback_query.message.reply_text(
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏—é:",
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
        elif update.message:
            sent_message = await update.message.reply_media_group(media=media)
            context.user_data["preview_message_ids"] = [m.message_id for m in sent_message]
            
            await update.message.reply_text(
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏—é:",
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
    else:
        if update.callback_query:
            await update.callback_query.edit_message_text(
                preview_text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
        elif update.message:
            await update.message.reply_text(
                preview_text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )

    return CONFIRMING

async def edit_listing(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer("–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
    keyboard = [
        [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start_sell")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–º—É –ø—Ä–æ—Å–º–æ—Ç—Ä—É", callback_data="back_to_preview")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
        reply_markup=reply_markup
    )
    return CONFIRMING

async def back_to_categories(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    return await start_selling(update, context)

async def back_to_subcategories(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    category_id = context.user_data["current_listing"]["category_id"]
    
    subcategories = CATEGORIES.get(category_id, {}).get("subcategories", {})
    keyboard = []
    for sub_id, sub_name in subcategories.items():
        keyboard.append([InlineKeyboardButton(sub_name, callback_data=f"subcategory|{category_id}|{sub_id}")])
    keyboard.append([InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="manual_subcategory")])
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"<b>–®–∞–≥ 2 –∏–∑ 10: –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è '{CATEGORIES.get(category_id, {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}' –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:</b>", # –ò–∑–º–µ–Ω–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )
    return CHOOSING_SUBCATEGORY

async def back_to_regions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    return await prompt_region(update, context)

async def back_to_cities(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    region_id = context.user_data["current_listing"]["region_id"]

    cities = REGIONS.get(region_id, {}).get("cities", {})
    keyboard = []
    for city_id, city_name in cities.items():
        keyboard.append([InlineKeyboardButton(city_name, callback_data=f"city|{region_id}|{city_id}")])
    keyboard.append([InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="manual_city")])
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–≥–∏–æ–Ω–∞–º", callback_data="back_to_regions")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"<b>–®–∞–≥ 4 –∏–∑ 10: –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è '{REGIONS.get(region_id, {}).get('name')}' –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:</b>", # –ò–∑–º–µ–Ω–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )
    return CHOOSING_CITY

async def back_to_preview(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    return await preview_listing(update, context)

async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer("–ü—É–±–ª–∏–∫—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ...")

    user_data = context.user_data.get("current_listing", {})

    required_fields = [
        "category_name", "subcategory_name", "region_name", "city_name",
        "condition_name", "title", "description", "price_raw"
    ]
    if not all(field in user_data for field in required_fields):
        error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /sell."
        try:
            await query.edit_message_text(error_message, parse_mode=ParseMode.HTML)
        except BadRequest as e:
            logger.warning(f"Failed to edit message in confirm (missing data, probably already edited): {e}")
            await query.message.reply_text(error_message, parse_mode=ParseMode.HTML)
        return ConversationHandler.END

    photos_to_send = user_data.get("photos", [])
    media = []
    if photos_to_send:
        for i, photo_id in enumerate(photos_to_send):
            if i == 0:
                media.append(InputMediaPhoto(media=photo_id, caption=format_listing_message(user_data), parse_mode=ParseMode.HTML))
            else:
                media.append(InputMediaPhoto(media=photo_id))
    else:
        pass

    try:
        preview_message_ids = context.user_data.get("preview_message_ids", [])
        if preview_message_ids:
            for msg_id in preview_message_ids:
                try:
                    await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=msg_id)
                except BadRequest as e:
                    logger.warning(f"Failed to delete preview message {msg_id}: {e}")
        
        if query.message:
            try:
                await query.message.delete()
            except BadRequest as e:
                logger.warning(f"Failed to delete confirmation buttons message: {e}")

        if media:
            await context.bot.send_media_group(chat_id=CHANNEL_ID, media=media)
        else:
            await context.bot.send_message(chat_id=CHANNEL_ID, text=format_listing_message(user_data), parse_mode=ParseMode.HTML)

        await query.message.reply_text(
            "‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–ª–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            parse_mode=ParseMode.HTML
        )
    except TelegramError as e:
        logger.error(f"Failed to send message to channel: {e}")
        error_msg = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.\n–û—à–∏–±–∫–∞: {e}"
        if query.message:
            await query.message.reply_text(error_msg, parse_mode=ParseMode.HTML)
        else:
            await context.bot.send_message(chat_id=update.effective_chat.id, text=error_msg, parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.error(f"An unexpected error occurred during confirmation: {e}")
        if query.message:
            await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.", parse_mode=ParseMode.HTML)
        else:
            await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.", parse_mode=ParseMode.HTML)

    context.user_data.clear()
    return ConversationHandler.END

def format_listing_message(data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª."""
    price_display = ""
    if data.get('price') == 0.0:
        price_display = "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ"
    elif data.get('price') == -1.0:
        price_display = "–û–±–º–µ–Ω"
    else:
        price_display = f"{data.get('price_raw')} UAH"

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞
    seller_contact_info = ""
    telegram_username = data.get('username')
    first_name = data.get('first_name')
    last_name = data.get('last_name')
    user_id = data.get('user_id')

    if telegram_username:
        seller_contact_info = f"<b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> <a href='https://t.me/{telegram_username}'>@{telegram_username}</a>"
    elif user_id:
        display_name = f"{first_name or ''} {last_name or ''}".strip()
        if not display_name:
            display_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user_id})"
        seller_contact_info = f"<b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> <a href='tg://user?id={user_id}'>{display_name}</a>"
    else:
        seller_contact_info = f"<b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    phone_number_info = ""
    if data.get('phone_number'):
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –≤—Å–µ, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ "+", –¥–ª—è —Å—Å—ã–ª–∫–∏ tel:
        clean_phone = re.sub(r'[^\d+]', '', data['phone_number'])
        phone_number_info = f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <a href='tel:{clean_phone}'>{data['phone_number']}</a>"


    message = f"""
‚ú® <b>–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ ULX Ukraine!</b>

<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data.get('title')}
<b>–¶–µ–Ω–∞:</b> {price_display}

<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{data.get('description')}

<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {data.get('category_name')} / {data.get('subcategory_name')}
<b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> {data.get('city_name')}, {data.get('region_name')}
<b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {data.get('condition_name')}

<b>–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}
{seller_contact_info}
{phone_number_info if phone_number_info else ''}
"""
    return message

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è."""
    query = update.callback_query
    
    preview_message_ids = context.user_data.get("preview_message_ids", [])
    if preview_message_ids:
        for msg_id in preview_message_ids:
            try:
                await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=msg_id)
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å ID: {msg_id}")
            except BadRequest as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (ID: {msg_id}) –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: {e}")

    if query:
        await query.answer()
        try:
            await query.edit_message_text(
                "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                parse_mode=ParseMode.HTML
            )
        except BadRequest as e:
            if "Message is not modified" in str(e):
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç –æ–± –æ—Ç–º–µ–Ω–µ, –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å: {e}")
                await query.message.reply_text(
                    "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                    parse_mode=ParseMode.HTML
                )
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: {e}")
                await query.message.reply_text(
                    "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                    parse_mode=ParseMode.HTML
                )
    elif update.message:
        await update.message.reply_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            parse_mode=ParseMode.HTML
        )
    context.user_data.clear()
    return ConversationHandler.END

async def unknown_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ callback-–∑–∞–ø—Ä–æ—Å—ã."""
    query = update.callback_query
    if query:
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await query.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start_sell")]])
        )

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö."""
    logger.error(f"Exception while handling an update: {context.error}")

    try:
        if isinstance(context.error, BadRequest) and "Message is not modified" in str(context.error):
            logger.info("Caught 'Message is not modified' error, ignoring.")
            return
        
        if isinstance(update, Update):
            if update.effective_message:
                await update.effective_message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.",
                    parse_mode=ParseMode.HTML
                )
            else:
                logger.warning("Unhandled update type in error_handler, cannot reply to user.")
    except Exception as e:
        logger.error(f"Error in error_handler's response: {e}")

def main() -> None:
    print("üöÄ –ó–∞–ø—É—Å–∫ ULX Ukraine Bot...")

    TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
    RENDER_EXTERNAL_URL = os.environ.get("RENDER_EXTERNAL_URL")

    if not TELEGRAM_TOKEN:
        raise ValueError("TELEGRAM_TOKEN environment variable not set.")

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start_selling),
            CallbackQueryHandler(start_selling, pattern="^start_sell$"),
            CommandHandler("sell", start_selling)
        ],
        states={
            CHOOSING_CATEGORY: [
                CallbackQueryHandler(choose_category, pattern="^category\\|.*$")
            ],
            CHOOSING_SUBCATEGORY: [
                CallbackQueryHandler(choose_subcategory, pattern="^subcategory\\|.*$"),
                CallbackQueryHandler(manual_subcategory, pattern="^manual_subcategory$"),
                CallbackQueryHandler(back_to_categories, pattern="^back_to_categories$")
            ],
            ADDING_MANUAL_SUBCATEGORY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_manual_subcategory)
            ],
            CHOOSING_REGION: [
                CallbackQueryHandler(choose_region, pattern="^region\\|.*$"),
                CallbackQueryHandler(back_to_subcategories, pattern="^back_to_subcategories$")
            ],
            CHOOSING_CITY: [
                CallbackQueryHandler(choose_city, pattern="^city\\|.*$"),
                CallbackQueryHandler(manual_city, pattern="^manual_city$"), # –î–æ–±–∞–≤–ª–µ–Ω–æ, –µ—Å–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —Ä–∞–Ω—å—à–µ
                CallbackQueryHandler(back_to_regions, pattern="^back_to_regions$")
            ],
            ADDING_MANUAL_CITY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_manual_city)
            ],
            CHOOSING_CONDITION: [
                CallbackQueryHandler(choose_condition, pattern="^condition\\|.*$"),
                CallbackQueryHandler(back_to_cities, pattern="^back_to_cities$")
            ],
            ADDING_TITLE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_title)
            ],
            ADDING_DESCRIPTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_description)
            ],
            ADDING_PRICE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_price)
            ],
            ADDING_PHOTOS: [
                MessageHandler(filters.PHOTO, handle_photos),
                CallbackQueryHandler(add_photos_handler, pattern="^add_photos$"),
                CallbackQueryHandler(skip_photos_handler, pattern="^skip_photos$"),
                CallbackQueryHandler(photos_done_handler, pattern="^photos_done$"),
                CallbackQueryHandler(remove_last_photo_handler, pattern="^remove_last_photo$")
            ],
            ADDING_PHONE_NUMBER: [ # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_phone_number),
                CallbackQueryHandler(skip_phone_number_handler, pattern="^skip_phone_number$")
            ],
            CONFIRMING: [
                CallbackQueryHandler(confirm, pattern="^confirm$"),
                CallbackQueryHandler(edit_listing, pattern="^edit$"),
                CallbackQueryHandler(back_to_preview, pattern="^back_to_preview$"),
            ]
        },
        fallbacks=[
            CommandHandler("cancel", cancel),
            CallbackQueryHandler(cancel, pattern="^cancel$"),
            CommandHandler("start", start),
            CallbackQueryHandler(main_menu_handler, pattern="^main_menu$")
        ]
    )
    app.add_handler(conv_handler)

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("sell", sell_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CallbackQueryHandler(help_command, pattern="^help$"))
    app.add_handler(CallbackQueryHandler(main_menu_handler, pattern="^main_menu$"))
    app.add_handler(CallbackQueryHandler(unknown_callback))
    app.add_error_handler(error_handler)

    if RENDER_EXTERNAL_URL:
        port = int(os.environ.get("PORT", "8080"))

        asyncio.get_event_loop().run_until_complete(
            app.bot.set_webhook(url=f"{RENDER_EXTERNAL_URL}/{TELEGRAM_TOKEN}")
        )
        print(f"‚úÖ –í–µ–±—Ö—É–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {RENDER_EXTERNAL_URL}/{TELEGRAM_TOKEN}")

        app.run_webhook(listen="0.0.0.0", port=port, url_path=TELEGRAM_TOKEN)
        print(f"‚úÖ ULX Ukraine Bot –∑–∞–ø—É—â–µ–Ω–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –≤–µ–±—Ö—É–∫—ñ–≤ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    else:
        print("‚úÖ ULX Ukraine Bot –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ (polling)!")
        app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
