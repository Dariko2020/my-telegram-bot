import logging
import os
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ConversationHandler, filters, ContextTypes
)
from telegram.constants import ParseMode
from telegram.error import TelegramError
from datetime import datetime
import json
from typing import Dict, Any, List, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# –¶–µ–π —Ä—è–¥–æ–∫ —Ä–∞–Ω—ñ—à–µ –º—ñ—Å—Ç–∏–≤ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–∏–π —Ç–æ–∫–µ–Ω —ñ –±—É–≤ –≤–∏–¥–∞–ª–µ–Ω–∏–π.
# –¢–æ–∫–µ–Ω —Ç–µ–ø–µ—Ä –±–µ—Ä–µ—Ç—å—Å—è –∑—ñ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è Render.
CHANNEL_ID = "@ulx_ukraine" # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
MAX_PHOTOS = 5
MAX_PHOTO_SIZE = 20 * 1024 * 1024  # 20MB
MAX_TITLE_LENGTH = 100
MAX_DESCRIPTION_LENGTH = 1000
MIN_PRICE = 0.01
MAX_PRICE = 1000000

# –°–æ—Å—Ç–æ—è–Ω–∏—è conversation handler
(
    CHOOSING_CATEGORY,
    CHOOSING_SUBCATEGORY,
    ADDING_MANUAL_SUBCATEGORY,
    CHOOSING_REGION,
    CHOOSING_CITY,
    ADDING_MANUAL_CITY,
    CHOOSING_CONDITION,
    ADDING_TITLE,
    ADDING_DESCRIPTION,
    ADDING_PRICE,
    ADDING_PHOTOS,
    CONFIRMING,
    TYPING_MANUAL_SUBCATEGORY, # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç, –µ—Å–ª–∏ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≤–∞—à–µ–º ConversationHandler
    TYPING_MANUAL_CITY, # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç, –µ—Å–ª–∏ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≤–∞—à–µ–º ConversationHandler
    TYPING_TITLE, # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç, –µ—Å–ª–∏ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    TYPING_DESCRIPTION, # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç, –µ—Å–ª–∏ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    TYPING_PRICE, # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç, –µ—Å–ª–∏ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
) = map(chr, range(16)) # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–π.
                       # –Ø –¥–æ–±–∞–≤–∏–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—â–∏—Ö, –µ—Å–ª–∏ —É –≤–∞—Å –±—ã–ª–∏ —Å–≤–æ–∏.
                       # –í–æ–∑–º–æ–∂–Ω–æ, –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ.

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
try:
    with open("categories.json", "r", encoding="utf-8") as f:
        CATEGORIES = json.load(f)
except FileNotFoundError:
    CATEGORIES = {}
    logger.error("categories.json not found. Please create it.")

try:
    with open("regions.json", "r", encoding="utf-8") as f:
        REGIONS = json.load(f)
except FileNotFoundError:
    REGIONS = {}
    logger.error("regions.json not found. Please create it.")

try:
    with open("conditions.json", "r", encoding="utf-8") as f:
        CONDITIONS = json.load(f)
except FileNotFoundError:
    CONDITIONS = {}
    logger.error("conditions.json not found. Please create it.")

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–≤ –ø–∞–º—è—Ç–∏, –¥–ª—è –ø—Ä–æ–¥–∞ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ë–î)
user_data_listings: Dict[int, Dict[str, Any]] = {}

# --- –§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ –≤–≤–æ–¥–µ /start."""
    keyboard = [
        [InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="start_sell")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ULX Ukraine Bot!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ –∏–ª–∏ –æ–±–º–µ–Ω–µ —Ç–æ–≤–∞—Ä–æ–≤.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    query = update.callback_query
    if query:
        await query.answer()
        keyboard = [
            [InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="start_sell")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        if query.message.text: # If it's not an inline keyboard from /start
             await query.edit_message_text(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup
            )
        else: # If it's a message from /start
            await query.message.reply_text(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup
            )
    return ConversationHandler.END # End current conversation if going to main menu

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é."""
    text = (
        "<b>ULX Ukraine Bot - –ü–æ–º–æ—â—å</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ —Ç–æ–≤–∞—Ä–æ–≤.\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n"
        "/sell - –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è.\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏.\n\n"
        "<b>–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:</b>\n"
        "1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ 'üöÄ –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ' –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /sell.\n"
        "2. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞, –≤—ã–±–∏—Ä–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —Ä–µ–≥–∏–æ–Ω, –≥–æ—Ä–æ–¥, —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, "
        "–≤–≤–æ–¥—è –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, —Ü–µ–Ω—É –∏ –∑–∞–≥—Ä—É–∂–∞—è —Ñ–æ—Ç–æ.\n"
        "3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –∏ –æ–Ω–æ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ."
    )
    keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    elif update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)

async def sell_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è."""
    return await start_selling(update, context)

async def start_selling(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è."""
    user_id = update.effective_user.id
    user_data_listings[user_id] = {
        "photos": [],
        "user_id": user_id,
        "username": update.effective_user.username,
        "first_name": update.effective_user.first_name,
        "last_name": update.effective_user.last_name
    }

    keyboard = []
    for category_id, category_name in CATEGORIES.items():
        keyboard.append([InlineKeyboardButton(category_name, callback_data=f"category|{category_id}")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    message = "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.\n\n" \
              "<b>–®–∞–≥ 1 –∏–∑ 9: –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:</b>"
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(message, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    else:
        await update.message.reply_text(message, reply_markup=reply_markup, parse_mode=ParseMode.HTML)

    return CHOOSING_CATEGORY

async def choose_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    category_id = query.data.split("|")[1]
    context.user_data["current_listing"] = user_data_listings.get(update.effective_user.id, {})
    context.user_data["current_listing"]["category_id"] = category_id
    context.user_data["current_listing"]["category_name"] = CATEGORIES.get(category_id)

    subcategories = CATEGORIES.get(category_id, {}).get("subcategories", {})
    keyboard = []
    for sub_id, sub_name in subcategories.items():
        keyboard.append([InlineKeyboardButton(sub_name, callback_data=f"subcategory|{category_id}|{sub_id}")])
    keyboard.append([InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="manual_subcategory")])
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"<b>–®–∞–≥ 2 –∏–∑ 9: –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è '{CATEGORIES.get(category_id)}' –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:</b>",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )
    return CHOOSING_SUBCATEGORY

async def manual_subcategory(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "<b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n"
        "(–ù–∞–ø—Ä–∏–º–µ—Ä: '–ò–≥—Ä–æ–≤—ã–µ –ü–ö', '–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞', '–î–µ—Ç—Å–∫–∏–µ –∫–Ω–∏–≥–∏')",
        parse_mode=ParseMode.HTML
    )
    return ADDING_MANUAL_SUBCATEGORY

async def add_manual_subcategory(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    manual_sub = update.message.text.strip()
    if not manual_sub:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        return ADDING_MANUAL_SUBCATEGORY

    context.user_data["current_listing"]["subcategory_id"] = "manual"
    context.user_data["current_listing"]["subcategory_name"] = manual_sub
    return await prompt_region(update, context)


async def choose_subcategory(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    _, category_id, sub_id = query.data.split("|")

    context.user_data["current_listing"] = user_data_listings.get(update.effective_user.id, {})
    
    # Ensure current_listing is correctly set up if not already
    if "category_id" not in context.user_data["current_listing"]:
        context.user_data["current_listing"]["category_id"] = category_id
        context.user_data["current_listing"]["category_name"] = CATEGORIES.get(category_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")


    subcategories = CATEGORIES.get(category_id, {}).get("subcategories", {})
    context.user_data["current_listing"]["subcategory_id"] = sub_id
    context.user_data["current_listing"]["subcategory_name"] = subcategories.get(sub_id)

    return await prompt_region(update, context)

async def prompt_region(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = []
    for region_id, region_data in REGIONS.items():
        keyboard.append([InlineKeyboardButton(region_data["name"], callback_data=f"region|{region_id}")])
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_subcategories")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await (update.callback_query or update.message).reply_text(
        "<b>–®–∞–≥ 3 –∏–∑ 9: –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:</b>",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )
    return CHOOSING_REGION

async def choose_region(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    region_id = query.data.split("|")[1]
    context.user_data["current_listing"]["region_id"] = region_id
    context.user_data["current_listing"]["region_name"] = REGIONS.get(region_id, {}).get("name")

    cities = REGIONS.get(region_id, {}).get("cities", {})
    keyboard = []
    for city_id, city_name in cities.items():
        keyboard.append([InlineKeyboardButton(city_name, callback_data=f"city|{region_id}|{city_id}")])
    keyboard.append([InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="manual_city")])
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–≥–∏–æ–Ω–∞–º", callback_data="back_to_regions")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"<b>–®–∞–≥ 4 –∏–∑ 9: –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è '{REGIONS.get(region_id, {}).get('name')}' –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:</b>",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )
    return CHOOSING_CITY

async def manual_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "<b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:</b>\n"
        "(–ù–∞–ø—Ä–∏–º–µ—Ä: '–ö–∏–µ–≤', '–û–¥–µ—Å—Å–∞', '–õ—å–≤–æ–≤')",
        parse_mode=ParseMode.HTML
    )
    return ADDING_MANUAL_CITY

async def add_manual_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    manual_city_name = update.message.text.strip()
    if not manual_city_name:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")
        return ADDING_MANUAL_CITY

    context.user_data["current_listing"]["city_id"] = "manual"
    context.user_data["current_listing"]["city_name"] = manual_city_name
    return await prompt_condition(update, context)

async def choose_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    _, region_id, city_id = query.data.split("|")

    cities = REGIONS.get(region_id, {}).get("cities", {})
    context.user_data["current_listing"]["city_id"] = city_id
    context.user_data["current_listing"]["city_name"] = cities.get(city_id)

    return await prompt_condition(update, context)

async def prompt_condition(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = []
    for condition_id, condition_name in CONDITIONS.items():
        keyboard.append([InlineKeyboardButton(condition_name, callback_data=f"condition|{condition_id}")])
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞", callback_data="back_to_cities")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = "<b>–®–∞–≥ 5 –∏–∑ 9: –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b>"
    if update.callback_query:
        await update.callback_query.edit_message_text(message, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    else: # This path is for manual city, where we got a message instead of callback
        await update.message.reply_text(message, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    return CHOOSING_CONDITION

async def choose_condition(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    condition_id = query.data.split("|")[1]
    context.user_data["current_listing"]["condition_id"] = condition_id
    context.user_data["current_listing"]["condition_name"] = CONDITIONS.get(condition_id)

    await query.edit_message_text(
        "<b>–®–∞–≥ 6 –∏–∑ 9: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤):</b>\n"
        "(–ù–∞–ø—Ä–∏–º–µ—Ä: '–ù–æ—É—Ç–±—É–∫ HP Pavilion', '–ö—Ä–æ—Å—Å–æ–≤–∫–∏ Nike Air Max')",
        parse_mode=ParseMode.HTML
    )
    return ADDING_TITLE

async def add_title(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    title = update.message.text.strip()
    if not title or len(title) > MAX_TITLE_LENGTH:
        await update.message.reply_text(
            f"–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–æ {MAX_TITLE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return ADDING_TITLE
    context.user_data["current_listing"]["title"] = title
    await update.message.reply_text(
        "<b>–®–∞–≥ 7 –∏–∑ 9: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤):</b>\n"
        "(–ù–∞–ø—Ä–∏–º–µ—Ä: '–ü—Ä–æ–¥–∞—é —Å–≤–æ–π –Ω–æ—É—Ç–±—É–∫, –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è 1 –≥–æ–¥...', "
        "—É–∫–∞–∂–∏—Ç–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é, –¥–µ—Ñ–µ–∫—Ç—ã –∏ —Ç.–¥.)",
        parse_mode=ParseMode.HTML
    )
    return ADDING_DESCRIPTION

async def add_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    description = update.message.text.strip()
    if not description or len(description) > MAX_DESCRIPTION_LENGTH:
        await update.message.reply_text(
            f"–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–æ {MAX_DESCRIPTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return ADDING_DESCRIPTION
    context.user_data["current_listing"]["description"] = description
    await update.message.reply_text(
        "<b>–®–∞–≥ 8 –∏–∑ 9: –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ UAH (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1500.50):</b>\n"
        "(–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ' –∏–ª–∏ '–û–±–º–µ–Ω'.)",
        parse_mode=ParseMode.HTML
    )
    return ADDING_PRICE

async def add_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    price_str = update.message.text.strip().replace(',', '.')
    context.user_data["current_listing"]["price_raw"] = price_str # Store raw for display
    
    price_value = None
    if price_str.lower() == "–±–µ—Å–ø–ª–∞—Ç–Ω–æ":
        price_value = 0.0
    elif price_str.lower() == "–æ–±–º–µ–Ω":
        price_value = -1.0 # Special value for exchange
    else:
        try:
            price_value = float(price_str)
            if not (MIN_PRICE <= price_value <= MAX_PRICE):
                raise ValueError("Price out of range")
        except ValueError:
            await update.message.reply_text(
                f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1500.50), '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ' –∏–ª–∏ '–û–±–º–µ–Ω'."
            )
            return ADDING_PRICE
    
    context.user_data["current_listing"]["price"] = price_value

    keyboard = [
        [InlineKeyboardButton("üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_photos")],
        [InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å (–±–µ–∑ —Ñ–æ—Ç–æ)", callback_data="skip_photos")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "<b>–®–∞–≥ 9 –∏–∑ 9: –î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–¥–æ 5 —à—Ç.) –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ:</b>\n"
        "<i>(–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ: 20 –ú–ë)</i>",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )
    return ADDING_PHOTOS

async def handle_photos(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_data = context.user_data.get("current_listing", {})
    photos = user_data.get("photos", [])

    if len(photos) >= MAX_PHOTOS:
        await update.message.reply_text(f"–í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ ({MAX_PHOTOS}).")
        return ADDING_PHOTOS
    
    photo_file = update.message.photo[-1] # Get the largest photo version
    if photo_file.file_size > MAX_PHOTO_SIZE:
        await update.message.reply_text(f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è (–º–∞–∫—Å. {MAX_PHOTO_SIZE / (1024 * 1024):.0f} –ú–ë). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –º–µ–Ω—å—à–µ–µ —Ñ–æ—Ç–æ.")
        return ADDING_PHOTOS

    photos.append(photo_file.file_id)
    user_data["photos"] = photos
    
    keyboard = []
    if len(photos) > 0:
        keyboard.append([InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ", callback_data="remove_last_photo")])
    if len(photos) < MAX_PHOTOS:
        keyboard.append([InlineKeyboardButton("üì∏ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ", callback_data="add_photos")])
    keyboard.append([InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ", callback_data="photos_done")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ: {len(photos)}/{MAX_PHOTOS}.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å.",
        reply_markup=reply_markup
    )
    return ADDING_PHOTOS

async def add_photos_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    user_data = context.user_data.get("current_listing", {})
    photos_count = len(user_data.get("photos", []))

    if photos_count >= MAX_PHOTOS:
        await query.edit_message_text(f"–í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ ({MAX_PHOTOS}). –ù–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å'.")
    else:
        await query.edit_message_text(
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é ({photos_count+1}/{MAX_PHOTOS}):"
        )
    return ADDING_PHOTOS

async def remove_last_photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user_data = context.user_data.get("current_listing", {})
    photos = user_data.get("photos", [])

    if photos:
        photos.pop()
        user_data["photos"] = photos
        keyboard = []
        if len(photos) > 0:
            keyboard.append([InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ", callback_data="remove_last_photo")])
        if len(photos) < MAX_PHOTOS:
            keyboard.append([InlineKeyboardButton("üì∏ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ", callback_data="add_photos")])
        keyboard.append([InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ", callback_data="photos_done")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ. –î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ: {len(photos)}/{MAX_PHOTOS}.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å.",
            reply_markup=reply_markup
        )
    else:
        await query.edit_message_text("–ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    return ADDING_PHOTOS

async def skip_photos_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data["current_listing"]["photos"] = [] # Ensure it's empty if skipped
    return await preview_listing(update, context)

async def photos_done_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    return await preview_listing(update, context)

async def preview_listing(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_data = context.user_data.get("current_listing", {})
    
    # Debugging: check if essential data is missing
    if not all(key in user_data for key in ["category_name", "subcategory_name", "region_name", "city_name", "condition_name", "title", "description", "price_raw"]):
        error_message = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å /sell."
        keyboard = [[InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start_sell")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        if update.callback_query:
            await update.callback_query.edit_message_text(error_message, reply_markup=reply_markup)
        elif update.message:
            await update.message.reply_text(error_message, reply_markup=reply_markup)
        return ConversationHandler.END


    preview_text = f"""
    ‚ú® <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</b>
    
    <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {user_data.get('category_name')}
    <b>–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {user_data.get('subcategory_name')}
    <b>–†–µ–≥–∏–æ–Ω:</b> {user_data.get('region_name')}
    <b>–ì–æ—Ä–æ–¥:</b> {user_data.get('city_name')}
    <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {user_data.get('condition_name')}
    
    <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {user_data.get('title')}
    <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {user_data.get('description')}
    <b>–¶–µ–Ω–∞:</b> {user_data.get('price_raw')} UAH
    
    <b>–§–æ—Ç–æ:</b> {len(user_data.get('photos', []))} —à—Ç.
    """

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="confirm")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit")],
        [InlineKeyboardButton("üóëÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # Send preview with photos if available
    photos_to_send = user_data.get('photos', [])
    if photos_to_send:
        media = []
        for i, photo_id in enumerate(photos_to_send):
            if i == 0: # First photo can have caption
                media.append(InputMediaPhoto(media=photo_id, caption=preview_text, parse_mode=ParseMode.HTML))
            else:
                media.append(InputMediaPhoto(media=photo_id))
        
        if update.callback_query:
            await update.callback_query.message.reply_media_group(media=media)
            await update.callback_query.message.reply_text(
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏—é:",
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
        elif update.message:
            await update.message.reply_media_group(media=media)
            await update.message.reply_text(
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏—é:",
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
    else:
        # If no photos, send only text
        if update.callback_query:
            await update.callback_query.edit_message_text(
                preview_text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
        elif update.message:
            await update.message.reply_text(
                preview_text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )

    return CONFIRMING

async def edit_listing(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer("–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
    # Implement specific edit options if needed
    keyboard = [
        [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start_sell")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–º—É –ø—Ä–æ—Å–º–æ—Ç—Ä—É", callback_data="back_to_preview")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
        reply_markup=reply_markup
    )
    return CONFIRMING # Stay in CONFIRMING state to allow back to preview

async def back_to_categories(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    return await start_selling(update, context)

async def back_to_subcategories(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    category_id = context.user_data["current_listing"]["category_id"]
    
    subcategories = CATEGORIES.get(category_id, {}).get("subcategories", {})
    keyboard = []
    for sub_id, sub_name in subcategories.items():
        keyboard.append([InlineKeyboardButton(sub_name, callback_data=f"subcategory|{category_id}|{sub_id}")])
    keyboard.append([InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="manual_subcategory")])
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"<b>–®–∞–≥ 2 –∏–∑ 9: –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è '{CATEGORIES.get(category_id)}' –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:</b>",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )
    return CHOOSING_SUBCATEGORY

async def back_to_regions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    return await prompt_region(update, context)

async def back_to_cities(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    region_id = context.user_data["current_listing"]["region_id"]

    cities = REGIONS.get(region_id, {}).get("cities", {})
    keyboard = []
    for city_id, city_name in cities.items():
        keyboard.append([InlineKeyboardButton(city_name, callback_data=f"city|{region_id}|{city_id}")])
    keyboard.append([InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="manual_city")])
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–≥–∏–æ–Ω–∞–º", callback_data="back_to_regions")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"<b>–®–∞–≥ 4 –∏–∑ 9: –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è '{REGIONS.get(region_id, {}).get('name')}' –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:</b>",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )
    return CHOOSING_CITY

async def back_to_preview(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    return await preview_listing(update, context)

async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer("–ü—É–±–ª–∏–∫—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ...")

    user_data = context.user_data.get("current_listing", {})

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π
    required_fields = [
        "category_name", "subcategory_name", "region_name", "city_name",
        "condition_name", "title", "description", "price_raw"
    ]
    if not all(field in user_data for field in required_fields):
        error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /sell."
        await query.edit_message_text(error_message, parse_mode=ParseMode.HTML)
        return ConversationHandler.END

    photos_to_send = user_data.get("photos", [])
    media = []
    if photos_to_send:
        for i, photo_id in enumerate(photos_to_send):
            if i == 0:
                media.append(InputMediaPhoto(media=photo_id, caption=format_listing_message(user_data), parse_mode=ParseMode.HTML))
            else:
                media.append(InputMediaPhoto(media=photo_id))
    else:
        # If no photos, just send the text message
        pass

    try:
        if media:
            await context.bot.send_media_group(chat_id=CHANNEL_ID, media=media)
        else:
            await context.bot.send_message(chat_id=CHANNEL_ID, text=format_listing_message(user_data), parse_mode=ParseMode.HTML)

        await query.edit_message_text(
            "‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–ª–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            parse_mode=ParseMode.HTML
        )
    except TelegramError as e:
        logger.error(f"Failed to send message to channel: {e}")
        error_msg = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.\n–û—à–∏–±–∫–∞: {e}"
        await query.edit_message_text(error_msg, parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.error(f"An unexpected error occurred during confirmation: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.", parse_mode=ParseMode.HTML)

    context.user_data.clear() # Clear user data after successful submission
    return ConversationHandler.END

def format_listing_message(data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª."""
    price_display = ""
    if data.get('price') == 0.0:
        price_display = "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ"
    elif data.get('price') == -1.0:
        price_display = "–û–±–º–µ–Ω"
    else:
        price_display = f"{data.get('price_raw')} UAH"

    username = f"@{data.get('username')}" if data.get('username') else f"{data.get('first_name')} {data.get('last_name') or ''}".strip()
    if not username: # Fallback if no username and no name
        username = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {data.get('user_id')}"


    message = f"""
‚ú® <b>–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ ULX Ukraine!</b>

<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data.get('title')}
<b>–¶–µ–Ω–∞:</b> {price_display}

<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{data.get('description')}

<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {data.get('category_name')} / {data.get('subcategory_name')}
<b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> {data.get('city_name')}, {data.get('region_name')}
<b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {data.get('condition_name')}

<b>–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}
<b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> {username}
"""
    return message

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è."""
    query = update.callback_query
    if query:
        await query.answer()
        await query.edit_message_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            parse_mode=ParseMode.HTML
        )
    elif update.message:
        await update.message.reply_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            parse_mode=ParseMode.HTML
        )
    context.user_data.clear()
    return ConversationHandler.END

async def unknown_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ callback-–∑–∞–ø—Ä–æ—Å—ã."""
    query = update.callback_query
    if query:
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await query.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start_sell")]])
        )

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö."""
    logger.error(f"Exception while handling an update: {context.error}")

    try:
        # Try to send a message back to the user
        if isinstance(update, Update):
            if update.effective_message:
                await update.effective_message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.",
                    parse_mode=ParseMode.HTML
                )
            elif update.callback_query:
                await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
                await update.callback_query.edit_message_text(
                    "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞</b>\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.",
                    parse_mode=ParseMode.HTML
                )
    except Exception as e:
        logger.error(f"Error in error_handler's response: {e}")


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    print("üöÄ –ó–∞–ø—É—Å–∫ ULX Ukraine Bot...")
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(REGIONS)} –æ–±–ª–∞—Å—Ç–µ–π")
    print(f"üèôÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ {sum(len(c) for c in REGIONS.values())} –≥–æ—Ä–æ–¥–æ–≤")
    print(f"üè∑Ô∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(CATEGORIES)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    print(f"üîß –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(CONDITIONS)} —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤")

    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –∑—ñ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è Render
    TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
    # –û—Ç—Ä–∏–º—É—î–º–æ URL —Å–µ—Ä–≤—ñ—Å—É –∑—ñ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è Render
    RENDER_EXTERNAL_URL = os.environ.get("RENDER_EXTERNAL_URL")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ç–æ–∫–µ–Ω
    if not TELEGRAM_TOKEN:
        raise ValueError("TELEGRAM_TOKEN environment variable not set.")

    # –°—Ç–≤–æ—Ä—é—î–º–æ ApplicationBuilder
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –†–µ—î—Å—Ç—Ä—É—î–º–æ —Ö–µ–Ω–¥–ª–µ—Ä–∏
    # conv_handler –º–∞—î –±—É—Ç–∏ –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π –í–ò–©–ï —Ñ—É–Ω–∫—Ü—ñ—ó main() –∞–±–æ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ñ–π –æ–±–ª–∞—Å—Ç—ñ –≤–∏–¥–∏–º–æ—Å—Ç—ñ
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start_selling),
            CallbackQueryHandler(start_selling, pattern="^start_sell$"),
            CommandHandler("sell", start_selling)
        ],
        states={
            CHOOSING_CATEGORY: [
                CallbackQueryHandler(choose_category, pattern="^category\\|.*$")
            ],
            CHOOSING_SUBCATEGORY: [
                CallbackQueryHandler(choose_subcategory, pattern="^subcategory\\|.*$"),
                CallbackQueryHandler(manual_subcategory, pattern="^manual_subcategory$"),
                CallbackQueryHandler(back_to_categories, pattern="^back_to_categories$")
            ],
            ADDING_MANUAL_SUBCATEGORY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_manual_subcategory)
            ],
            CHOOSING_REGION: [
                CallbackQueryHandler(choose_region, pattern="^region\\|.*$"),
                CallbackQueryHandler(back_to_subcategories, pattern="^back_to_subcategories$")
            ],
            CHOOSING_CITY: [
                CallbackQueryHandler(choose_city, pattern="^city\\|.*$"),
                CallbackQueryHandler(back_to_regions, pattern="^back_to_regions$")
            ],
            ADDING_MANUAL_CITY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_manual_city)
            ],
            CHOOSING_CONDITION: [
                CallbackQueryHandler(choose_condition, pattern="^condition\\|.*$"),
                CallbackQueryHandler(back_to_cities, pattern="^back_to_cities$")
            ],
            ADDING_TITLE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_title)
            ],
            ADDING_DESCRIPTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_description)
            ],
            ADDING_PRICE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_price)
            ],
            ADDING_PHOTOS: [
                MessageHandler(filters.PHOTO, handle_photos),
                CallbackQueryHandler(add_photos_handler, pattern="^add_photos$"),
                CallbackQueryHandler(skip_photos_handler, pattern="^skip_photos$"),
                CallbackQueryHandler(photos_done_handler, pattern="^photos_done$"),
                CallbackQueryHandler(remove_last_photo_handler, pattern="^remove_last_photo$")
            ],
            CONFIRMING: [
                CallbackQueryHandler(confirm, pattern="^confirm$"),
                CallbackQueryHandler(edit_listing, pattern="^edit$"),
                CallbackQueryHandler(back_to_preview, pattern="^back_to_preview$"),
            ]
        },
        fallbacks=[
            CommandHandler("cancel", cancel),
            CallbackQueryHandler(cancel, pattern="^cancel$"),
            CommandHandler("start", start),
            CallbackQueryHandler(main_menu_handler, pattern="^main_menu$")
        ]
    )
    app.add_handler(conv_handler)

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("sell", sell_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CallbackQueryHandler(help_command, pattern="^help$"))
    app.add_handler(CallbackQueryHandler(main_menu_handler, pattern="^main_menu$"))
    app.add_handler(CallbackQueryHandler(unknown_callback))
    app.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    if RENDER_EXTERNAL_URL:
        port = int(os.environ.get("PORT", "8080"))

        asyncio.get_event_loop().run_until_complete(
            app.bot.set_webhook(url=f"{RENDER_EXTERNAL_URL}/{TELEGRAM_TOKEN}")
        )
        print(f"‚úÖ –í–µ–±—Ö—É–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {RENDER_EXTERNAL_URL}/{TELEGRAM_TOKEN}")

        app.run_webhook(listen="0.0.0.0", port=port, url_path=TELEGRAM_TOKEN)
        print(f"‚úÖ ULX Ukraine Bot –∑–∞–ø—É—â–µ–Ω–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –≤–µ–±—Ö—É–∫—ñ–≤ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    else:
        print("‚úÖ ULX Ukraine Bot –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ (polling)!")
        app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
